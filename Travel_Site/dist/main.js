/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={192:(e,t,n)=>{"use strict";n.d(t,{Z:()=>f});var r=n(537),o=n.n(r),i=n(645),a=n.n(i),s=n(667),l=n.n(s),c=new URL(n(448),n.b),u=a()(o()),p=l()(c);u.push([e.id,"*{font-family:Tahoma,Geneva,Verdana,sans-serif}html{width:100%;margin:0;padding:0;height:100%;box-sizing:border-box}body{background-color:#fff;width:100%;margin:0;padding:0;height:100%;box-sizing:border-box;text-align:center}main{width:100%;margin:0;padding:0;height:100%;box-sizing:border-box;padding-top:80px}header{background-color:#109dd4;width:100%;margin:0;padding:0;height:100%;box-sizing:border-box;position:fixed;left:0;top:0%;height:80px;display:flex;align-items:center;justify-content:center;flex-direction:row}nav{padding-top:1em;padding-bottom:1em;padding-right:.25em;padding-left:.25em;text-align:center}ul,li{display:inline;list-style-type:none;margin:0;padding:0}a{color:#000;padding:.5em;margin:0}a:hover{color:blue}input,select{width:125px;margin:.25em;border:1px solid #000;border-collapse:collapse;border-radius:.25em;box-shadow:inset 1px 2px 8px rgba(0,0,0,.07)}button{display:inline;border:1px solid #000;border-collapse:collapse;border-radius:.25em;box-shadow:inset 1px 2px 8px rgba(0,0,0,.07)}h2{padding:.25em;margin:0}h4{padding:0;margin:0}#cities,#covid,#translate,#weather{display:none}#home{width:100%;margin:0;padding:0;height:100%;box-sizing:border-box;vertical-align:center;display:grid;grid-template-columns:1fr;grid-template-rows:1fr .5fr 1fr}#home #mainHome{background-image:url("+p+");grid-row:1/2}#home #mission{grid-row:2/3;display:inline-block;width:100%;margin:0;padding:0;height:100%;box-sizing:border-box;display:flex;align-items:center;justify-content:center;flex-direction:column;padding:1em}#home #whatToDo{grid-row:3/4;display:inline-block;width:100%;margin:0;padding:0;height:100%;box-sizing:border-box;display:flex;align-items:center;justify-content:center;flex-direction:column;color:#fff;background:navy;padding:1em}#home ul,#home li{list-style-type:none}#home li{display:block;padding:.5em}#cities{padding-top:40px}#cities .place{border-top:2px solid #000;border-bottom:2px solid #000;border-collapse:collapse;padding:1em}#cities #attractions,#cities #food,#cities #health,#cities #stores,#cities #transportation,#cities #useful{display:none}#cities h2{font-weight:bold;font-size:1.25em}#cities nav{width:100%;margin:0;padding:0;height:100%;box-sizing:border-box;position:fixed;left:0;top:80px;display:flex;align-items:center;justify-content:center;flex-direction:row;padding-top:.5em;padding-bottom:.5em;background-color:#bffbfa;height:40px}#cities #citiesInputs,#cities #citiesDetails{padding-right:.5em;padding-left:.5em}#weather .day,#weather #currentWeather{border:1px solid #000;border-collapse:collapse;text-align:center}#weather .day .date,#weather .day #now,#weather #currentWeather .date,#weather #currentWeather #now{font-weight:bold;font-size:1.25em}#weather #weatherInfo{display:none}#translate{width:100%;margin:0;padding:0;height:100%;box-sizing:border-box}#translate #chooseLang{width:100%;margin:0;padding:0;height:100%;box-sizing:border-box;display:grid;grid-template-columns:1fr 1fr}#translate #translateInput,#translate #translateInput:focus{outline:none;border:none}#translate #translateInputDiv{border:1px solid #000;border-collapse:collapse;width:100%;margin:0;padding:0;height:100%;box-sizing:border-box}#translate #translateInputDiv #translateInput{margin-right:1%;padding:.5em;width:99%;box-sizing:border-box;height:70%;display:inline-block;background-color:#fff}#translate #translateOutputDiv{border:1px solid #000;border-collapse:collapse;width:100%;margin:0;padding:0;height:100%;box-sizing:border-box}#translate #translateOutputDiv #translateOutput{width:100%;margin:0;padding:0;height:70%;box-sizing:border-box;padding:.5em;display:inline-block;background-color:#fff}#translate #translateInputDiv span,#translate #translateOutputDiv label{display:inline-block;width:100%;margin:0;padding:0;height:20%;box-sizing:border-box;border:1px solid #000;border-collapse:collapse;padding:1em}#translate #translateGo{display:block;margin:auto}#covid #covidDaily{display:none}#covid th,#covid td{border:1px solid #000;border-collapse:collapse;padding:.25em}#covid table{margin:10%;width:80%;padding:0;border:1px solid #000;border-collapse:collapse}#covid td:nth-child(2){text-align:right}@media screen and (min-width: 768px){#home{grid-template-columns:1fr 1fr;grid-template-rows:1fr 1fr}#home #mainHome{grid-column:1/3;grid-row:1/2}#home #mission{grid-column:1/2;grid-row:2/3}#home #whatToDo{grid-column:2/3;grid-row:2/3}#translate #chooseLang{width:100%;margin:0;padding:0;height:50%;box-sizing:border-box}#cities h2{font-weight:bold;font-size:1.25em}}","",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"AA6DA,EACI,4CAAA,CAGJ,KApDI,UAAA,CACA,QAAA,CACA,SAAA,CACA,WAJuB,CAKvB,qBAAA,CAoDJ,KACI,qBAtEe,CAaf,UAAA,CACA,QAAA,CACA,SAAA,CACA,WAJuB,CAKvB,qBAAA,CAuDA,iBAAA,CAGJ,KA9DI,UAAA,CACA,QAAA,CACA,SAAA,CACA,WAJuB,CAKvB,qBAAA,CA4DA,gBApEY,CAuEhB,OACI,wBAAA,CApEA,UAAA,CACA,QAAA,CACA,SAAA,CACA,WAJuB,CAKvB,qBAAA,CA2BA,cAAA,CACA,MAAA,CACA,MAJa,CAyCb,WA1EY,CAyCZ,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,kBAJ2B,CAsC/B,IACI,eAjFe,CAkFf,kBAlFe,CAmFf,mBArFc,CAsFd,kBAtFc,CAuFd,iBAAA,CAGJ,MACI,cAAA,CACA,oBAAA,CACA,QAAA,CACA,SAAA,CAGJ,EACI,UAAA,CACA,YAlGe,CAmGf,QAAA,CAGJ,QACI,UA1Gc,CA6GlB,aACI,WAAA,CACA,YA7Gc,CAsBd,qBAAA,CACA,wBAAA,CAKA,mBAAA,CACA,4CAAA,CAoFJ,OACI,cAAA,CA5FA,qBAAA,CACA,wBAAA,CAKA,mBAAA,CACA,4CAAA,CAyFJ,GACI,aAvHc,CAwHd,QAAA,CAGJ,GACI,SAAA,CACA,QAAA,CAGJ,mCACI,YAAA,CAGJ,MA5HI,UAAA,CACA,QAAA,CACA,SAAA,CACA,WAJuB,CAKvB,qBAAA,CA2HA,qBAAA,CAEA,YAAA,CACA,yBAAA,CACA,+BAAA,CAEA,gBACI,wDAAA,CACA,YAAA,CAGJ,eACG,YAAA,CAEA,oBAAA,CA7IH,UAAA,CACA,QAAA,CACA,SAAA,CACA,WAJuB,CAKvB,qBAAA,CAiCA,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,qBAuGwB,CACrB,WAtJY,CAyJf,gBACI,YAAA,CACA,oBAAA,CArJJ,UAAA,CACA,QAAA,CACA,SAAA,CACA,WAJuB,CAKvB,qBAAA,CAiCA,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,qBA+GyB,CA3GzB,UAAA,CACA,eA2G2B,CACvB,WA/JW,CAkKf,kBACI,oBAAA,CAGJ,SACI,aAAA,CACA,YAzKW,CA8KnB,QACI,gBA3KgB,CA6KhB,eACI,yBAAA,CACA,4BAAA,CACA,wBAAA,CACA,WApLW,CAuLf,2GACI,YAAA,CAGJ,WA5JA,gBAAA,CACA,gBAAA,CA+JA,YAzLA,UAAA,CACA,QAAA,CACA,SAAA,CACA,WAJuB,CAKvB,qBAAA,CA2BA,cAAA,CACA,MAAA,CACA,QArCY,CAyCZ,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,kBAJ2B,CAwJvB,gBAnMW,CAoMX,mBApMW,CAqMX,wBAzMiB,CA0MjB,WAlMY,CAqMhB,6CACI,kBA1MW,CA2MX,iBA3MW,CAgNf,uCA3LA,qBAAA,CACA,wBAAA,CA4LI,iBAAA,CAEA,oGApLJ,gBAAA,CACA,gBAAA,CAwLD,sBACI,YAAA,CAIP,WAvNI,UAAA,CACA,QAAA,CACA,SAAA,CACA,WAJuB,CAKvB,qBAAA,CAuNA,uBA3NA,UAAA,CACA,QAAA,CACA,SAAA,CACA,WAJuB,CAKvB,qBAAA,CAyNI,YAAA,CACA,6BAAA,CAGJ,4DACI,YAAA,CACA,WAAA,CAGJ,8BAxNA,qBAAA,CACA,wBAAA,CAfA,UAAA,CACA,QAAA,CACA,SAAA,CACA,WAJuB,CAKvB,qBAAA,CAsOI,8CACI,eAAA,CACA,YAnPO,CAoPP,SAAA,CACA,qBAAA,CACA,UAAA,CACA,oBAAA,CACA,qBA9PO,CAkQf,+BAvOA,qBAAA,CACA,wBAAA,CAfA,UAAA,CACA,QAAA,CACA,SAAA,CACA,WAJuB,CAKvB,qBAAA,CAqPI,gDAzPJ,UAAA,CACA,QAAA,CACA,SAAA,CACA,UAuPwB,CAtPxB,qBAAA,CAuPI,YAlQW,CAmQX,oBAAA,CACA,qBA1QW,CA8Qf,wEAEA,oBAAA,CAnQA,UAAA,CACA,QAAA,CACA,SAAA,CACA,UAiQoB,CAhQpB,qBAAA,CAUA,qBAAA,CACA,wBAAA,CAuPA,WA5Qe,CA+Qf,wBACI,aAAA,CACA,WAAA,CAMJ,mBACI,YAAA,CAGJ,oBAvQA,qBAAA,CACA,wBAAA,CAwQI,aA/RU,CAkSd,aAlRA,UADuB,CAEvB,SAAA,CACA,SAAA,CAIA,qBAAA,CACA,wBAAA,CAgRA,uBACI,gBAAA,CAIR,qCAEI,MACI,6BAAA,CACA,0BAAA,CAEA,gBACI,eAAA,CACA,YAAA,CAGJ,eACI,eAAA,CACA,YAAA,CAGJ,gBACI,eAAA,CACA,YAAA,CAKJ,uBA3TJ,UAAA,CACA,QAAA,CACA,SAAA,CACA,UAyT4B,CAxT5B,qBAAA,CA6TI,WAxSJ,gBAAA,CACA,gBAAA,CAAA",sourcesContent:["$background-color: white;\r\n$secondary-background-color: #12B2EB;\r\n$third-background-color: #BFFBFA;\r\n$highlight-color: blue;\r\n\r\n$minimal-spacing: .25em;\r\n$moderate-padding: .5em;\r\n$standard-padding: 1em;\r\n\r\n$header-height: 80px;\r\n$second-nav-height: 40px;\r\n\r\n@mixin full-width($height: 100%) {\r\n    width: 100%;\r\n    margin: 0;\r\n    padding: 0;\r\n    height: $height;\r\n    box-sizing: border-box;\r\n}\r\n\r\n@mixin set-margin($margin: 10%) {\r\n    margin: $margin;\r\n    width: (100% - ($margin * 2));\r\n    padding: 0;\r\n}\r\n\r\n@mixin set-border($width: 1px, ) {\r\n    border: $width solid black;\r\n    border-collapse: collapse;\r\n}\r\n\r\n@mixin border-input {\r\n    @include set-border();\r\n    border-radius: .25em;\r\n    box-shadow: inset 1px 2px 8px rgba(0, 0, 0, 0.07);\r\n}\r\n\r\n@mixin emphasize-text() {\r\n    font-weight: bold;\r\n    font-size: 1.25em;\r\n}\r\n\r\n@mixin bar($top: 0%) {\r\n    @include full-width();\r\n    position: fixed;\r\n    left: 0;\r\n    top: $top;\r\n}\r\n\r\n@mixin flex-center($direction: row) {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: $direction;\r\n}\r\n\r\n@mixin invert-colors($background: black) {\r\n    color: white;\r\n    background: $background;\r\n}\r\n\r\n* {\r\n    font-family: Tahoma, Geneva, Verdana, sans-serif;\r\n}\r\n\r\nhtml {\r\n    @include full-width();\r\n}\r\n\r\nbody {\r\n    background-color: $background-color;\r\n    @include full-width();\r\n    text-align: center;\r\n}\r\n\r\nmain {\r\n    @include full-width();\r\n    padding-top: $header-height;\r\n}\r\n\r\nheader {\r\n    background-color: rgb(16, 157, 212) ;\r\n    @include bar();\r\n    height: $header-height;\r\n    @include flex-center();\r\n}\r\n\r\nnav {\r\n    padding-top: $standard-padding;\r\n    padding-bottom: $standard-padding;\r\n    padding-right: $minimal-spacing;\r\n    padding-left: $minimal-spacing;\r\n    text-align:center;\r\n}\r\n\r\nul, li {\r\n    display: inline;\r\n    list-style-type: none;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\na {\r\n    color: black;\r\n    padding: $moderate-padding;\r\n    margin: 0;\r\n}\r\n\r\na:hover {\r\n    color: $highlight-color;\r\n}\r\n\r\ninput, select {\r\n    width: 125px;\r\n    margin: $minimal-spacing;\r\n    @include border-input();\r\n}\r\n\r\nbutton {\r\n    display: inline;\r\n    @include border-input();\r\n}\r\n\r\nh2 {\r\n    padding: $minimal-spacing;\r\n    margin: 0;\r\n}\r\n\r\nh4 {\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n\r\n#cities, #covid, #translate, #weather {\r\n    display: none;\r\n}\r\n\r\n#home {\r\n    @include full-width();\r\n\r\n    vertical-align: center;\r\n\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    grid-template-rows: 1fr .5fr 1fr;\r\n\r\n    #mainHome {\r\n        background-image: url('../images/gray-world-map-min.jpg');\r\n        grid-row: 1 / 2;\r\n    }\r\n\r\n    #mission {\r\n       grid-row: 2 / 3;\r\n\r\n       display: inline-block;\r\n       @include full-width();\r\n       @include flex-center(column);\r\n       padding: $standard-padding;\r\n    }\r\n\r\n    #whatToDo {\r\n        grid-row: 3 / 4;\r\n        display: inline-block;\r\n        @include full-width();\r\n        @include flex-center(column);\r\n        @include invert-colors(navy);\r\n        padding: $standard-padding;\r\n    }\r\n\r\n    ul, li {\r\n        list-style-type: none;\r\n    }\r\n\r\n    li {\r\n        display: block;\r\n        padding: $moderate-padding;\r\n    }\r\n    \r\n}\r\n\r\n#cities {\r\n    padding-top: $second-nav-height;\r\n    \r\n    .place {\r\n        border-top: 2px solid black;\r\n        border-bottom: 2px solid black;\r\n        border-collapse: collapse;\r\n        padding: $standard-padding;\r\n    }\r\n\r\n    #attractions, #food, #health, #stores, #transportation, #useful {\r\n        display: none;\r\n    }\r\n\r\n    h2 {\r\n        @include emphasize-text();\r\n    }\r\n\r\n    nav {\r\n        @include bar($header-height);\r\n        @include flex-center();\r\n        padding-top: $moderate-padding;\r\n        padding-bottom: $moderate-padding;\r\n        background-color: $third-background-color;\r\n        height: $second-nav-height;\r\n    }\r\n\r\n    #citiesInputs, #citiesDetails {\r\n        padding-right: $moderate-padding;\r\n        padding-left: $moderate-padding;\r\n    }\r\n}\r\n\r\n#weather {\r\n    .day, #currentWeather {\r\n        @include set-border();\r\n        text-align: center;\r\n\r\n        .date, #now {\r\n            @include emphasize-text();\r\n        }\r\n    }\r\n\r\n   #weatherInfo {\r\n       display: none;\r\n   }\r\n}\r\n\r\n#translate {\r\n\r\n    @include full-width();\r\n\r\n    #chooseLang {\r\n        @include full-width();\r\n        display: grid;\r\n        grid-template-columns: 1fr 1fr;\r\n    }\r\n\r\n    #translateInput, #translateInput:focus {\r\n        outline: none;\r\n        border: none;\r\n    }\r\n    \r\n    #translateInputDiv {\r\n        @include set-border();\r\n        @include full-width();\r\n\r\n        #translateInput {\r\n            margin-right: 1%;\r\n            padding: $moderate-padding;\r\n            width: 99%;\r\n            box-sizing: border-box;\r\n            height: 70%;\r\n            display: inline-block;\r\n            background-color: $background-color;\r\n        }\r\n    } \r\n    \r\n    #translateOutputDiv {\r\n        @include set-border();\r\n        @include full-width();\r\n\r\n        #translateOutput {\r\n        @include full-width(70%);\r\n        padding: $moderate-padding;\r\n        display: inline-block;\r\n        background-color: $background-color;\r\n        }\r\n    }\r\n\r\n    #translateInputDiv span,\r\n#translateOutputDiv label {\r\n    display: inline-block;\r\n    @include full-width(20%);\r\n    @include set-border();\r\n    padding: $standard-padding;\r\n    }\r\n\r\n    #translateGo {\r\n        display: block;\r\n        margin: auto;\r\n    }\r\n\r\n}\r\n\r\n#covid {\r\n    #covidDaily {\r\n        display: none;\r\n    }\r\n\r\n    th, td {\r\n        @include set-border();\r\n        padding: $minimal-spacing;\r\n    }\r\n    \r\n    table {\r\n        @include set-margin();\r\n        @include set-border();\r\n    }\r\n\r\n    td:nth-child(2) {\r\n        text-align: right;\r\n    }\r\n}\r\n\r\n@media screen and (min-width: 768px) {\r\n\r\n    #home {\r\n        grid-template-columns: 1fr 1fr;\r\n        grid-template-rows: 1fr 1fr;\r\n\r\n        #mainHome {\r\n            grid-column: 1 / 3;\r\n            grid-row: 1 / 2;\r\n        }\r\n\r\n        #mission {\r\n            grid-column: 1 / 2;\r\n            grid-row: 2 / 3;\r\n        }\r\n\r\n        #whatToDo {\r\n            grid-column: 2 / 3;\r\n            grid-row: 2 / 3;\r\n        }\r\n    }\r\n\r\n    #translate {\r\n        #chooseLang {\r\n            @include full-width(50%);\r\n        }\r\n    }\r\n\r\n    #cities {\r\n        h2 {\r\n            @include emphasize-text();\r\n        }\r\n    }\r\n}\r\n\r\n"],sourceRoot:""}]);const f=u},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},667:e=>{"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(a).concat([i]).join("\n")}return[t].join("\n")}},755:function(e,t){var n;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(r,o){"use strict";var i=[],a=Object.getPrototypeOf,s=i.slice,l=i.flat?function(e){return i.flat.call(e)}:function(e){return i.concat.apply([],e)},c=i.push,u=i.indexOf,p={},f=p.toString,d=p.hasOwnProperty,h=d.toString,y=h.call(Object),g={},A=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},m=function(e){return null!=e&&e===e.window},v=r.document,b={type:!0,src:!0,nonce:!0,noModule:!0};function x(e,t,n){var r,o,i=(n=n||v).createElement("script");if(i.text=e,t)for(r in b)(o=t[r]||t.getAttribute&&t.getAttribute(r))&&i.setAttribute(r,o);n.head.appendChild(i).parentNode.removeChild(i)}function C(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?p[f.call(e)]||"object":typeof e}var w="3.6.0",S=function(e,t){return new S.fn.init(e,t)};function T(e){var t=!!e&&"length"in e&&e.length,n=C(e);return!A(e)&&!m(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}S.fn=S.prototype={jquery:w,constructor:S,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=S.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return S.each(this,e)},map:function(e){return this.pushStack(S.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(S.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(S.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:i.sort,splice:i.splice},S.extend=S.fn.extend=function(){var e,t,n,r,o,i,a=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||A(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(c&&r&&(S.isPlainObject(r)||(o=Array.isArray(r)))?(n=a[t],i=o&&!Array.isArray(n)?[]:o||S.isPlainObject(n)?n:{},o=!1,a[t]=S.extend(c,i,r)):void 0!==r&&(a[t]=r));return a},S.extend({expando:"jQuery"+(w+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==f.call(e)||(t=a(e))&&("function"!=typeof(n=d.call(t,"constructor")&&t.constructor)||h.call(n)!==y))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){x(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(T(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(T(Object(e))?S.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,o=e.length;r<n;r++)e[o++]=t[r];return e.length=o,e},grep:function(e,t,n){for(var r=[],o=0,i=e.length,a=!n;o<i;o++)!t(e[o],o)!==a&&r.push(e[o]);return r},map:function(e,t,n){var r,o,i=0,a=[];if(T(e))for(r=e.length;i<r;i++)null!=(o=t(e[i],i,n))&&a.push(o);else for(i in e)null!=(o=t(e[i],i,n))&&a.push(o);return l(a)},guid:1,support:g}),"function"==typeof Symbol&&(S.fn[Symbol.iterator]=i[Symbol.iterator]),S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){p["[object "+t+"]"]=t.toLowerCase()}));var j=function(e){var t,n,r,o,i,a,s,l,c,u,p,f,d,h,y,g,A,m,v,b="sizzle"+1*new Date,x=e.document,C=0,w=0,S=le(),T=le(),j=le(),k=le(),E=function(e,t){return e===t&&(p=!0),0},D={}.hasOwnProperty,B=[],O=B.pop,N=B.push,$=B.push,I=B.slice,P=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",q="[\\x20\\t\\r\\n\\f]",M="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",R="\\[[\\x20\\t\\r\\n\\f]*("+M+")(?:"+q+"*([*^$|!~]?=)"+q+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+M+"))|)"+q+"*\\]",W=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|.*)\\)|)",F=new RegExp(q+"+","g"),H=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),U=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),_=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),G=new RegExp(q+"|>"),z=new RegExp(W),J=new RegExp("^"+M+"$"),Q={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+W),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,V=/^(?:input|select|textarea|button)$/i,K=/^h\d$/i,X=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oe=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){f()},ae=be((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{$.apply(B=I.call(x.childNodes),x.childNodes),B[x.childNodes.length].nodeType}catch(e){$={apply:B.length?function(e,t){N.apply(e,I.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function se(e,t,r,o){var i,s,c,u,p,h,A,m=t&&t.ownerDocument,x=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==x&&9!==x&&11!==x)return r;if(!o&&(f(t),t=t||d,y)){if(11!==x&&(p=Z.exec(e)))if(i=p[1]){if(9===x){if(!(c=t.getElementById(i)))return r;if(c.id===i)return r.push(c),r}else if(m&&(c=m.getElementById(i))&&v(t,c)&&c.id===i)return r.push(c),r}else{if(p[2])return $.apply(r,t.getElementsByTagName(e)),r;if((i=p[3])&&n.getElementsByClassName&&t.getElementsByClassName)return $.apply(r,t.getElementsByClassName(i)),r}if(n.qsa&&!k[e+" "]&&(!g||!g.test(e))&&(1!==x||"object"!==t.nodeName.toLowerCase())){if(A=e,m=t,1===x&&(G.test(e)||_.test(e))){for((m=ee.test(e)&&Ae(t.parentNode)||t)===t&&n.scope||((u=t.getAttribute("id"))?u=u.replace(re,oe):t.setAttribute("id",u=b)),s=(h=a(e)).length;s--;)h[s]=(u?"#"+u:":scope")+" "+ve(h[s]);A=h.join(",")}try{return $.apply(r,m.querySelectorAll(A)),r}catch(t){k(e,!0)}finally{u===b&&t.removeAttribute("id")}}}return l(e.replace(H,"$1"),t,r,o)}function le(){var e=[];return function t(n,o){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=o}}function ce(e){return e[b]=!0,e}function ue(e){var t=d.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function pe(e,t){for(var n=e.split("|"),o=n.length;o--;)r.attrHandle[n[o]]=t}function fe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function de(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ye(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ge(e){return ce((function(t){return t=+t,ce((function(n,r){for(var o,i=e([],n.length,t),a=i.length;a--;)n[o=i[a]]&&(n[o]=!(r[o]=n[o]))}))}))}function Ae(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},i=se.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},f=se.setDocument=function(e){var t,o,a=e?e.ownerDocument||e:x;return a!=d&&9===a.nodeType&&a.documentElement?(h=(d=a).documentElement,y=!i(d),x!=d&&(o=d.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",ie,!1):o.attachEvent&&o.attachEvent("onunload",ie)),n.scope=ue((function(e){return h.appendChild(e).appendChild(d.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ue((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ue((function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=X.test(d.getElementsByClassName),n.getById=ue((function(e){return h.appendChild(e).id=b,!d.getElementsByName||!d.getElementsByName(b).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&y){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&y){var n,r,o,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(o=t.getElementsByName(e),r=0;i=o[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],o=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[o++];)1===n.nodeType&&r.push(n);return r}return i},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&y)return t.getElementsByClassName(e)},A=[],g=[],(n.qsa=X.test(d.querySelectorAll))&&(ue((function(e){var t;h.appendChild(e).innerHTML="<a id='"+b+"'></a><select id='"+b+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+L+")"),e.querySelectorAll("[id~="+b+"-]").length||g.push("~="),(t=d.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||g.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+b+"+*").length||g.push(".#.+[+~]"),e.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")})),ue((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=d.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")}))),(n.matchesSelector=X.test(m=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ue((function(e){n.disconnectedMatch=m.call(e,"*"),m.call(e,"[s!='']:x"),A.push("!=",W)})),g=g.length&&new RegExp(g.join("|")),A=A.length&&new RegExp(A.join("|")),t=X.test(h.compareDocumentPosition),v=t||X.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},E=t?function(e,t){if(e===t)return p=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==d||e.ownerDocument==x&&v(x,e)?-1:t==d||t.ownerDocument==x&&v(x,t)?1:u?P(u,e)-P(u,t):0:4&r?-1:1)}:function(e,t){if(e===t)return p=!0,0;var n,r=0,o=e.parentNode,i=t.parentNode,a=[e],s=[t];if(!o||!i)return e==d?-1:t==d?1:o?-1:i?1:u?P(u,e)-P(u,t):0;if(o===i)return fe(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?fe(a[r],s[r]):a[r]==x?-1:s[r]==x?1:0},d):d},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(f(e),n.matchesSelector&&y&&!k[t+" "]&&(!A||!A.test(t))&&(!g||!g.test(t)))try{var r=m.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){k(t,!0)}return se(t,d,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!=d&&f(e),v(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=d&&f(e);var o=r.attrHandle[t.toLowerCase()],i=o&&D.call(r.attrHandle,t.toLowerCase())?o(e,t,!y):void 0;return void 0!==i?i:n.attributes||!y?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},se.escape=function(e){return(e+"").replace(re,oe)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,r=[],o=0,i=0;if(p=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(E),p){for(;t=e[i++];)t===e[i]&&(o=r.push(i));for(;o--;)e.splice(r[o],1)}return u=null,e},o=se.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},r=se.selectors={cacheLength:50,createPseudo:ce,match:Q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Q.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&z.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=S[e+" "];return t||(t=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+e+"("+q+"|$)"))&&S(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var o=se.attr(r,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&o.indexOf(n)>-1:"$="===t?n&&o.slice(-n.length)===n:"~="===t?(" "+o.replace(F," ")+" ").indexOf(n)>-1:"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,o){var i="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===o?function(e){return!!e.parentNode}:function(t,n,l){var c,u,p,f,d,h,y=i!==a?"nextSibling":"previousSibling",g=t.parentNode,A=s&&t.nodeName.toLowerCase(),m=!l&&!s,v=!1;if(g){if(i){for(;y;){for(f=t;f=f[y];)if(s?f.nodeName.toLowerCase()===A:1===f.nodeType)return!1;h=y="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?g.firstChild:g.lastChild],a&&m){for(v=(d=(c=(u=(p=(f=g)[b]||(f[b]={}))[f.uniqueID]||(p[f.uniqueID]={}))[e]||[])[0]===C&&c[1])&&c[2],f=d&&g.childNodes[d];f=++d&&f&&f[y]||(v=d=0)||h.pop();)if(1===f.nodeType&&++v&&f===t){u[e]=[C,d,v];break}}else if(m&&(v=d=(c=(u=(p=(f=t)[b]||(f[b]={}))[f.uniqueID]||(p[f.uniqueID]={}))[e]||[])[0]===C&&c[1]),!1===v)for(;(f=++d&&f&&f[y]||(v=d=0)||h.pop())&&((s?f.nodeName.toLowerCase()!==A:1!==f.nodeType)||!++v||(m&&((u=(p=f[b]||(f[b]={}))[f.uniqueID]||(p[f.uniqueID]={}))[e]=[C,v]),f!==t)););return(v-=o)===r||v%r==0&&v/r>=0}}},PSEUDO:function(e,t){var n,o=r.pseudos[e]||r.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return o[b]?o(t):o.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ce((function(e,n){for(var r,i=o(e,t),a=i.length;a--;)e[r=P(e,i[a])]=!(n[r]=i[a])})):function(e){return o(e,0,n)}):o}},pseudos:{not:ce((function(e){var t=[],n=[],r=s(e.replace(H,"$1"));return r[b]?ce((function(e,t,n,o){for(var i,a=r(e,null,o,[]),s=e.length;s--;)(i=a[s])&&(e[s]=!(t[s]=i))})):function(e,o,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}})),has:ce((function(e){return function(t){return se(e,t).length>0}})),contains:ce((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||o(t)).indexOf(e)>-1}})),lang:ce((function(e){return J.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=y?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ye(!1),disabled:ye(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return V.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge((function(){return[0]})),last:ge((function(e,t){return[t-1]})),eq:ge((function(e,t,n){return[n<0?n+t:n]})),even:ge((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:ge((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:ge((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:ge((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}},r.pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=de(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=he(t);function me(){}function ve(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function be(e,t,n){var r=t.dir,o=t.next,i=o||r,a=n&&"parentNode"===i,s=w++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,o);return!1}:function(t,n,l){var c,u,p,f=[C,s];if(l){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,l))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(u=(p=t[b]||(t[b]={}))[t.uniqueID]||(p[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[r]||t;else{if((c=u[i])&&c[0]===C&&c[1]===s)return f[2]=c[2];if(u[i]=f,f[2]=e(t,n,l))return!0}return!1}}function xe(e){return e.length>1?function(t,n,r){for(var o=e.length;o--;)if(!e[o](t,n,r))return!1;return!0}:e[0]}function Ce(e,t,n,r,o){for(var i,a=[],s=0,l=e.length,c=null!=t;s<l;s++)(i=e[s])&&(n&&!n(i,r,o)||(a.push(i),c&&t.push(s)));return a}function we(e,t,n,r,o,i){return r&&!r[b]&&(r=we(r)),o&&!o[b]&&(o=we(o,i)),ce((function(i,a,s,l){var c,u,p,f=[],d=[],h=a.length,y=i||function(e,t,n){for(var r=0,o=t.length;r<o;r++)se(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),g=!e||!i&&t?y:Ce(y,f,e,s,l),A=n?o||(i?e:h||r)?[]:a:g;if(n&&n(g,A,s,l),r)for(c=Ce(A,d),r(c,[],s,l),u=c.length;u--;)(p=c[u])&&(A[d[u]]=!(g[d[u]]=p));if(i){if(o||e){if(o){for(c=[],u=A.length;u--;)(p=A[u])&&c.push(g[u]=p);o(null,A=[],c,l)}for(u=A.length;u--;)(p=A[u])&&(c=o?P(i,p):f[u])>-1&&(i[c]=!(a[c]=p))}}else A=Ce(A===a?A.splice(h,A.length):A),o?o(null,a,A,l):$.apply(a,A)}))}function Se(e){for(var t,n,o,i=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],l=a?1:0,u=be((function(e){return e===t}),s,!0),p=be((function(e){return P(t,e)>-1}),s,!0),f=[function(e,n,r){var o=!a&&(r||n!==c)||((t=n).nodeType?u(e,n,r):p(e,n,r));return t=null,o}];l<i;l++)if(n=r.relative[e[l].type])f=[be(xe(f),n)];else{if((n=r.filter[e[l].type].apply(null,e[l].matches))[b]){for(o=++l;o<i&&!r.relative[e[o].type];o++);return we(l>1&&xe(f),l>1&&ve(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(H,"$1"),n,l<o&&Se(e.slice(l,o)),o<i&&Se(e=e.slice(o)),o<i&&ve(e))}f.push(n)}return xe(f)}return me.prototype=r.filters=r.pseudos,r.setFilters=new me,a=se.tokenize=function(e,t){var n,o,i,a,s,l,c,u=T[e+" "];if(u)return t?0:u.slice(0);for(s=e,l=[],c=r.preFilter;s;){for(a in n&&!(o=U.exec(s))||(o&&(s=s.slice(o[0].length)||s),l.push(i=[])),n=!1,(o=_.exec(s))&&(n=o.shift(),i.push({value:n,type:o[0].replace(H," ")}),s=s.slice(n.length)),r.filter)!(o=Q[a].exec(s))||c[a]&&!(o=c[a](o))||(n=o.shift(),i.push({value:n,type:a,matches:o}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):T(e,l).slice(0)},s=se.compile=function(e,t){var n,o=[],i=[],s=j[e+" "];if(!s){for(t||(t=a(e)),n=t.length;n--;)(s=Se(t[n]))[b]?o.push(s):i.push(s);s=j(e,function(e,t){var n=t.length>0,o=e.length>0,i=function(i,a,s,l,u){var p,h,g,A=0,m="0",v=i&&[],b=[],x=c,w=i||o&&r.find.TAG("*",u),S=C+=null==x?1:Math.random()||.1,T=w.length;for(u&&(c=a==d||a||u);m!==T&&null!=(p=w[m]);m++){if(o&&p){for(h=0,a||p.ownerDocument==d||(f(p),s=!y);g=e[h++];)if(g(p,a||d,s)){l.push(p);break}u&&(C=S)}n&&((p=!g&&p)&&A--,i&&v.push(p))}if(A+=m,n&&m!==A){for(h=0;g=t[h++];)g(v,b,a,s);if(i){if(A>0)for(;m--;)v[m]||b[m]||(b[m]=O.call(l));b=Ce(b)}$.apply(l,b),u&&!i&&b.length>0&&A+t.length>1&&se.uniqueSort(l)}return u&&(C=S,c=x),v};return n?ce(i):i}(i,o)),s.selector=e}return s},l=se.select=function(e,t,n,o){var i,l,c,u,p,f="function"==typeof e&&e,d=!o&&a(e=f.selector||e);if(n=n||[],1===d.length){if((l=d[0]=d[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===t.nodeType&&y&&r.relative[l[1].type]){if(!(t=(r.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return n;f&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(i=Q.needsContext.test(e)?0:l.length;i--&&(c=l[i],!r.relative[u=c.type]);)if((p=r.find[u])&&(o=p(c.matches[0].replace(te,ne),ee.test(l[0].type)&&Ae(t.parentNode)||t))){if(l.splice(i,1),!(e=o.length&&ve(l)))return $.apply(n,o),n;break}}return(f||s(e,d))(o,t,!y,n,!t||ee.test(e)&&Ae(t.parentNode)||t),n},n.sortStable=b.split("").sort(E).join("")===b,n.detectDuplicates=!!p,f(),n.sortDetached=ue((function(e){return 1&e.compareDocumentPosition(d.createElement("fieldset"))})),ue((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||pe("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ue((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||pe("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ue((function(e){return null==e.getAttribute("disabled")}))||pe(L,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),se}(r);S.find=j,S.expr=j.selectors,S.expr[":"]=S.expr.pseudos,S.uniqueSort=S.unique=j.uniqueSort,S.text=j.getText,S.isXMLDoc=j.isXML,S.contains=j.contains,S.escapeSelector=j.escape;var k=function(e,t,n){for(var r=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&S(e).is(n))break;r.push(e)}return r},E=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},D=S.expr.match.needsContext;function B(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var O=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function N(e,t,n){return A(t)?S.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?S.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?S.grep(e,(function(e){return u.call(t,e)>-1!==n})):S.filter(t,e,n)}S.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?S.find.matchesSelector(r,e)?[r]:[]:S.find.matches(e,S.grep(t,(function(e){return 1===e.nodeType})))},S.fn.extend({find:function(e){var t,n,r=this.length,o=this;if("string"!=typeof e)return this.pushStack(S(e).filter((function(){for(t=0;t<r;t++)if(S.contains(o[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)S.find(e,o[t],n);return r>1?S.uniqueSort(n):n},filter:function(e){return this.pushStack(N(this,e||[],!1))},not:function(e){return this.pushStack(N(this,e||[],!0))},is:function(e){return!!N(this,"string"==typeof e&&D.test(e)?S(e):e||[],!1).length}});var $,I=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(S.fn.init=function(e,t,n){var r,o;if(!e)return this;if(n=n||$,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:I.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof S?t[0]:t,S.merge(this,S.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:v,!0)),O.test(r[1])&&S.isPlainObject(t))for(r in t)A(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=v.getElementById(r[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):A(e)?void 0!==n.ready?n.ready(e):e(S):S.makeArray(e,this)}).prototype=S.fn,$=S(v);var P=/^(?:parents|prev(?:Until|All))/,L={children:!0,contents:!0,next:!0,prev:!0};function q(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}S.fn.extend({has:function(e){var t=S(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(S.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,o=this.length,i=[],a="string"!=typeof e&&S(e);if(!D.test(e))for(;r<o;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&S.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?S.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?u.call(S(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(S.uniqueSort(S.merge(this.get(),S(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),S.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return k(e,"parentNode")},parentsUntil:function(e,t,n){return k(e,"parentNode",n)},next:function(e){return q(e,"nextSibling")},prev:function(e){return q(e,"previousSibling")},nextAll:function(e){return k(e,"nextSibling")},prevAll:function(e){return k(e,"previousSibling")},nextUntil:function(e,t,n){return k(e,"nextSibling",n)},prevUntil:function(e,t,n){return k(e,"previousSibling",n)},siblings:function(e){return E((e.parentNode||{}).firstChild,e)},children:function(e){return E(e.firstChild)},contents:function(e){return null!=e.contentDocument&&a(e.contentDocument)?e.contentDocument:(B(e,"template")&&(e=e.content||e),S.merge([],e.childNodes))}},(function(e,t){S.fn[e]=function(n,r){var o=S.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(o=S.filter(r,o)),this.length>1&&(L[e]||S.uniqueSort(o),P.test(e)&&o.reverse()),this.pushStack(o)}}));var M=/[^\x20\t\r\n\f]+/g;function R(e){return e}function W(e){throw e}function F(e,t,n,r){var o;try{e&&A(o=e.promise)?o.call(e).done(t).fail(n):e&&A(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}S.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return S.each(e.match(M)||[],(function(e,n){t[n]=!0})),t}(e):S.extend({},e);var t,n,r,o,i=[],a=[],s=-1,l=function(){for(o=o||e.once,r=t=!0;a.length;s=-1)for(n=a.shift();++s<i.length;)!1===i[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=i.length,n=!1);e.memory||(n=!1),t=!1,o&&(i=n?[]:"")},c={add:function(){return i&&(n&&!t&&(s=i.length-1,a.push(n)),function t(n){S.each(n,(function(n,r){A(r)?e.unique&&c.has(r)||i.push(r):r&&r.length&&"string"!==C(r)&&t(r)}))}(arguments),n&&!t&&l()),this},remove:function(){return S.each(arguments,(function(e,t){for(var n;(n=S.inArray(t,i,n))>-1;)i.splice(n,1),n<=s&&s--})),this},has:function(e){return e?S.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return o=a=[],i=n="",this},disabled:function(){return!i},lock:function(){return o=a=[],n||t||(i=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},S.extend({Deferred:function(e){var t=[["notify","progress",S.Callbacks("memory"),S.Callbacks("memory"),2],["resolve","done",S.Callbacks("once memory"),S.Callbacks("once memory"),0,"resolved"],["reject","fail",S.Callbacks("once memory"),S.Callbacks("once memory"),1,"rejected"]],n="pending",o={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return S.Deferred((function(n){S.each(t,(function(t,r){var o=A(e[r[4]])&&e[r[4]];i[r[1]]((function(){var e=o&&o.apply(this,arguments);e&&A(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,o?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,o){var i=0;function a(e,t,n,o){return function(){var s=this,l=arguments,c=function(){var r,c;if(!(e<i)){if((r=n.apply(s,l))===t.promise())throw new TypeError("Thenable self-resolution");c=r&&("object"==typeof r||"function"==typeof r)&&r.then,A(c)?o?c.call(r,a(i,t,R,o),a(i,t,W,o)):(i++,c.call(r,a(i,t,R,o),a(i,t,W,o),a(i,t,R,t.notifyWith))):(n!==R&&(s=void 0,l=[r]),(o||t.resolveWith)(s,l))}},u=o?c:function(){try{c()}catch(r){S.Deferred.exceptionHook&&S.Deferred.exceptionHook(r,u.stackTrace),e+1>=i&&(n!==W&&(s=void 0,l=[r]),t.rejectWith(s,l))}};e?u():(S.Deferred.getStackHook&&(u.stackTrace=S.Deferred.getStackHook()),r.setTimeout(u))}}return S.Deferred((function(r){t[0][3].add(a(0,r,A(o)?o:R,r.notifyWith)),t[1][3].add(a(0,r,A(e)?e:R)),t[2][3].add(a(0,r,A(n)?n:W))})).promise()},promise:function(e){return null!=e?S.extend(e,o):o}},i={};return S.each(t,(function(e,r){var a=r[2],s=r[5];o[r[1]]=a.add,s&&a.add((function(){n=s}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(r[3].fire),i[r[0]]=function(){return i[r[0]+"With"](this===i?void 0:this,arguments),this},i[r[0]+"With"]=a.fireWith})),o.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,r=Array(n),o=s.call(arguments),i=S.Deferred(),a=function(e){return function(n){r[e]=this,o[e]=arguments.length>1?s.call(arguments):n,--t||i.resolveWith(r,o)}};if(t<=1&&(F(e,i.done(a(n)).resolve,i.reject,!t),"pending"===i.state()||A(o[n]&&o[n].then)))return i.then();for(;n--;)F(o[n],a(n),i.reject);return i.promise()}});var H=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;S.Deferred.exceptionHook=function(e,t){r.console&&r.console.warn&&e&&H.test(e.name)&&r.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},S.readyException=function(e){r.setTimeout((function(){throw e}))};var U=S.Deferred();function _(){v.removeEventListener("DOMContentLoaded",_),r.removeEventListener("load",_),S.ready()}S.fn.ready=function(e){return U.then(e).catch((function(e){S.readyException(e)})),this},S.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--S.readyWait:S.isReady)||(S.isReady=!0,!0!==e&&--S.readyWait>0||U.resolveWith(v,[S]))}}),S.ready.then=U.then,"complete"===v.readyState||"loading"!==v.readyState&&!v.documentElement.doScroll?r.setTimeout(S.ready):(v.addEventListener("DOMContentLoaded",_),r.addEventListener("load",_));var G=function(e,t,n,r,o,i,a){var s=0,l=e.length,c=null==n;if("object"===C(n))for(s in o=!0,n)G(e,t,s,n[s],!0,i,a);else if(void 0!==r&&(o=!0,A(r)||(a=!0),c&&(a?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(S(e),n)})),t))for(;s<l;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return o?e:c?t.call(e):l?t(e[0],n):i},z=/^-ms-/,J=/-([a-z])/g;function Q(e,t){return t.toUpperCase()}function Y(e){return e.replace(z,"ms-").replace(J,Q)}var V=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function K(){this.expando=S.expando+K.uid++}K.uid=1,K.prototype={cache:function(e){var t=e[this.expando];return t||(t={},V(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,o=this.cache(e);if("string"==typeof t)o[Y(t)]=n;else for(r in t)o[Y(r)]=t[r];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Y(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Y):(t=Y(t))in r?[t]:t.match(M)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||S.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!S.isEmptyObject(t)}};var X=new K,Z=new K,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}S.extend({hasData:function(e){return Z.hasData(e)||X.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return X.access(e,t,n)},_removeData:function(e,t){X.remove(e,t)}}),S.fn.extend({data:function(e,t){var n,r,o,i=this[0],a=i&&i.attributes;if(void 0===e){if(this.length&&(o=Z.get(i),1===i.nodeType&&!X.get(i,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=Y(r.slice(5)),ne(i,r,o[r]));X.set(i,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each((function(){Z.set(this,e)})):G(this,(function(t){var n;if(i&&void 0===t)return void 0!==(n=Z.get(i,e))||void 0!==(n=ne(i,e))?n:void 0;this.each((function(){Z.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Z.remove(this,e)}))}}),S.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=X.get(e,t),n&&(!r||Array.isArray(n)?r=X.access(e,t,S.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=S.queue(e,t),r=n.length,o=n.shift(),i=S._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),r--),o&&("fx"===t&&n.unshift("inprogress"),delete i.stop,o.call(e,(function(){S.dequeue(e,t)}),i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return X.get(e,n)||X.access(e,n,{empty:S.Callbacks("once memory").add((function(){X.remove(e,[t+"queue",n])}))})}}),S.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?S.queue(this[0],e):void 0===t?this:this.each((function(){var n=S.queue(this,e,t);S._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&S.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){S.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,o=S.Deferred(),i=this,a=this.length,s=function(){--r||o.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=X.get(i[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),o.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,oe=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],ae=v.documentElement,se=function(e){return S.contains(e.ownerDocument,e)},le={composed:!0};ae.getRootNode&&(se=function(e){return S.contains(e.ownerDocument,e)||e.getRootNode(le)===e.ownerDocument});var ce=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&se(e)&&"none"===S.css(e,"display")};function ue(e,t,n,r){var o,i,a=20,s=r?function(){return r.cur()}:function(){return S.css(e,t,"")},l=s(),c=n&&n[3]||(S.cssNumber[t]?"":"px"),u=e.nodeType&&(S.cssNumber[t]||"px"!==c&&+l)&&oe.exec(S.css(e,t));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;a--;)S.style(e,t,u+c),(1-i)*(1-(i=s()/l||.5))<=0&&(a=0),u/=i;u*=2,S.style(e,t,u+c),n=n||[]}return n&&(u=+u||+l||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=u,r.end=o)),o}var pe={};function fe(e){var t,n=e.ownerDocument,r=e.nodeName,o=pe[r];return o||(t=n.body.appendChild(n.createElement(r)),o=S.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),pe[r]=o,o)}function de(e,t){for(var n,r,o=[],i=0,a=e.length;i<a;i++)(r=e[i]).style&&(n=r.style.display,t?("none"===n&&(o[i]=X.get(r,"display")||null,o[i]||(r.style.display="")),""===r.style.display&&ce(r)&&(o[i]=fe(r))):"none"!==n&&(o[i]="none",X.set(r,"display",n)));for(i=0;i<a;i++)null!=o[i]&&(e[i].style.display=o[i]);return e}S.fn.extend({show:function(){return de(this,!0)},hide:function(){return de(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ce(this)?S(this).show():S(this).hide()}))}});var he,ye,ge=/^(?:checkbox|radio)$/i,Ae=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,me=/^$|^module$|\/(?:java|ecma)script/i;he=v.createDocumentFragment().appendChild(v.createElement("div")),(ye=v.createElement("input")).setAttribute("type","radio"),ye.setAttribute("checked","checked"),ye.setAttribute("name","t"),he.appendChild(ye),g.checkClone=he.cloneNode(!0).cloneNode(!0).lastChild.checked,he.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!he.cloneNode(!0).lastChild.defaultValue,he.innerHTML="<option></option>",g.option=!!he.lastChild;var ve={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function be(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&B(e,t)?S.merge([e],n):n}function xe(e,t){for(var n=0,r=e.length;n<r;n++)X.set(e[n],"globalEval",!t||X.get(t[n],"globalEval"))}ve.tbody=ve.tfoot=ve.colgroup=ve.caption=ve.thead,ve.th=ve.td,g.option||(ve.optgroup=ve.option=[1,"<select multiple='multiple'>","</select>"]);var Ce=/<|&#?\w+;/;function we(e,t,n,r,o){for(var i,a,s,l,c,u,p=t.createDocumentFragment(),f=[],d=0,h=e.length;d<h;d++)if((i=e[d])||0===i)if("object"===C(i))S.merge(f,i.nodeType?[i]:i);else if(Ce.test(i)){for(a=a||p.appendChild(t.createElement("div")),s=(Ae.exec(i)||["",""])[1].toLowerCase(),l=ve[s]||ve._default,a.innerHTML=l[1]+S.htmlPrefilter(i)+l[2],u=l[0];u--;)a=a.lastChild;S.merge(f,a.childNodes),(a=p.firstChild).textContent=""}else f.push(t.createTextNode(i));for(p.textContent="",d=0;i=f[d++];)if(r&&S.inArray(i,r)>-1)o&&o.push(i);else if(c=se(i),a=be(p.appendChild(i),"script"),c&&xe(a),n)for(u=0;i=a[u++];)me.test(i.type||"")&&n.push(i);return p}var Se=/^([^.]*)(?:\.(.+)|)/;function Te(){return!0}function je(){return!1}function ke(e,t){return e===function(){try{return v.activeElement}catch(e){}}()==("focus"===t)}function Ee(e,t,n,r,o,i){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)Ee(e,s,n,r,t[s],i);return e}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),!1===o)o=je;else if(!o)return e;return 1===i&&(a=o,o=function(e){return S().off(e),a.apply(this,arguments)},o.guid=a.guid||(a.guid=S.guid++)),e.each((function(){S.event.add(this,t,o,r,n)}))}function De(e,t,n){n?(X.set(e,t,!1),S.event.add(e,t,{namespace:!1,handler:function(e){var r,o,i=X.get(this,t);if(1&e.isTrigger&&this[t]){if(i.length)(S.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=s.call(arguments),X.set(this,t,i),r=n(this,t),this[t](),i!==(o=X.get(this,t))||r?X.set(this,t,!1):o={},i!==o)return e.stopImmediatePropagation(),e.preventDefault(),o&&o.value}else i.length&&(X.set(this,t,{value:S.event.trigger(S.extend(i[0],S.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===X.get(e,t)&&S.event.add(e,t,Te)}S.event={global:{},add:function(e,t,n,r,o){var i,a,s,l,c,u,p,f,d,h,y,g=X.get(e);if(V(e))for(n.handler&&(n=(i=n).handler,o=i.selector),o&&S.find.matchesSelector(ae,o),n.guid||(n.guid=S.guid++),(l=g.events)||(l=g.events=Object.create(null)),(a=g.handle)||(a=g.handle=function(t){return void 0!==S&&S.event.triggered!==t.type?S.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(M)||[""]).length;c--;)d=y=(s=Se.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),d&&(p=S.event.special[d]||{},d=(o?p.delegateType:p.bindType)||d,p=S.event.special[d]||{},u=S.extend({type:d,origType:y,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&S.expr.match.needsContext.test(o),namespace:h.join(".")},i),(f=l[d])||((f=l[d]=[]).delegateCount=0,p.setup&&!1!==p.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(d,a)),p.add&&(p.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),o?f.splice(f.delegateCount++,0,u):f.push(u),S.event.global[d]=!0)},remove:function(e,t,n,r,o){var i,a,s,l,c,u,p,f,d,h,y,g=X.hasData(e)&&X.get(e);if(g&&(l=g.events)){for(c=(t=(t||"").match(M)||[""]).length;c--;)if(d=y=(s=Se.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),d){for(p=S.event.special[d]||{},f=l[d=(r?p.delegateType:p.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=i=f.length;i--;)u=f[i],!o&&y!==u.origType||n&&n.guid!==u.guid||s&&!s.test(u.namespace)||r&&r!==u.selector&&("**"!==r||!u.selector)||(f.splice(i,1),u.selector&&f.delegateCount--,p.remove&&p.remove.call(e,u));a&&!f.length&&(p.teardown&&!1!==p.teardown.call(e,h,g.handle)||S.removeEvent(e,d,g.handle),delete l[d])}else for(d in l)S.event.remove(e,d+t[c],n,r,!0);S.isEmptyObject(l)&&X.remove(e,"handle events")}},dispatch:function(e){var t,n,r,o,i,a,s=new Array(arguments.length),l=S.event.fix(e),c=(X.get(this,"events")||Object.create(null))[l.type]||[],u=S.event.special[l.type]||{};for(s[0]=l,t=1;t<arguments.length;t++)s[t]=arguments[t];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(a=S.event.handlers.call(this,l,c),t=0;(o=a[t++])&&!l.isPropagationStopped();)for(l.currentTarget=o.elem,n=0;(i=o.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==i.namespace&&!l.rnamespace.test(i.namespace)||(l.handleObj=i,l.data=i.data,void 0!==(r=((S.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,s))&&!1===(l.result=r)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,r,o,i,a,s=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(i=[],a={},n=0;n<l;n++)void 0===a[o=(r=t[n]).selector+" "]&&(a[o]=r.needsContext?S(o,this).index(c)>-1:S.find(o,this,null,[c]).length),a[o]&&i.push(r);i.length&&s.push({elem:c,handlers:i})}return c=this,l<t.length&&s.push({elem:c,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(S.Event.prototype,e,{enumerable:!0,configurable:!0,get:A(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[S.expando]?e:new S.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return ge.test(t.type)&&t.click&&B(t,"input")&&De(t,"click",Te),!1},trigger:function(e){var t=this||e;return ge.test(t.type)&&t.click&&B(t,"input")&&De(t,"click"),!0},_default:function(e){var t=e.target;return ge.test(t.type)&&t.click&&B(t,"input")&&X.get(t,"click")||B(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},S.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},S.Event=function(e,t){if(!(this instanceof S.Event))return new S.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Te:je,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&S.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[S.expando]=!0},S.Event.prototype={constructor:S.Event,isDefaultPrevented:je,isPropagationStopped:je,isImmediatePropagationStopped:je,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Te,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Te,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Te,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},S.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},S.event.addProp),S.each({focus:"focusin",blur:"focusout"},(function(e,t){S.event.special[e]={setup:function(){return De(this,e,ke),!1},trigger:function(){return De(this,e),!0},_default:function(){return!0},delegateType:t}})),S.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){S.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,o=e.relatedTarget,i=e.handleObj;return o&&(o===r||S.contains(r,o))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}})),S.fn.extend({on:function(e,t,n,r){return Ee(this,e,t,n,r)},one:function(e,t,n,r){return Ee(this,e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,S(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=je),this.each((function(){S.event.remove(this,e,n,t)}))}});var Be=/<script|<style|<link/i,Oe=/checked\s*(?:[^=]|=\s*.checked.)/i,Ne=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function $e(e,t){return B(e,"table")&&B(11!==t.nodeType?t:t.firstChild,"tr")&&S(e).children("tbody")[0]||e}function Ie(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Pe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Le(e,t){var n,r,o,i,a,s;if(1===t.nodeType){if(X.hasData(e)&&(s=X.get(e).events))for(o in X.remove(t,"handle events"),s)for(n=0,r=s[o].length;n<r;n++)S.event.add(t,o,s[o][n]);Z.hasData(e)&&(i=Z.access(e),a=S.extend({},i),Z.set(t,a))}}function qe(e,t){var n=t.nodeName.toLowerCase();"input"===n&&ge.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Me(e,t,n,r){t=l(t);var o,i,a,s,c,u,p=0,f=e.length,d=f-1,h=t[0],y=A(h);if(y||f>1&&"string"==typeof h&&!g.checkClone&&Oe.test(h))return e.each((function(o){var i=e.eq(o);y&&(t[0]=h.call(this,o,i.html())),Me(i,t,n,r)}));if(f&&(i=(o=we(t,e[0].ownerDocument,!1,e,r)).firstChild,1===o.childNodes.length&&(o=i),i||r)){for(s=(a=S.map(be(o,"script"),Ie)).length;p<f;p++)c=o,p!==d&&(c=S.clone(c,!0,!0),s&&S.merge(a,be(c,"script"))),n.call(e[p],c,p);if(s)for(u=a[a.length-1].ownerDocument,S.map(a,Pe),p=0;p<s;p++)c=a[p],me.test(c.type||"")&&!X.access(c,"globalEval")&&S.contains(u,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?S._evalUrl&&!c.noModule&&S._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},u):x(c.textContent.replace(Ne,""),c,u))}return e}function Re(e,t,n){for(var r,o=t?S.filter(t,e):e,i=0;null!=(r=o[i]);i++)n||1!==r.nodeType||S.cleanData(be(r)),r.parentNode&&(n&&se(r)&&xe(be(r,"script")),r.parentNode.removeChild(r));return e}S.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,o,i,a,s=e.cloneNode(!0),l=se(e);if(!(g.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||S.isXMLDoc(e)))for(a=be(s),r=0,o=(i=be(e)).length;r<o;r++)qe(i[r],a[r]);if(t)if(n)for(i=i||be(e),a=a||be(s),r=0,o=i.length;r<o;r++)Le(i[r],a[r]);else Le(e,s);return(a=be(s,"script")).length>0&&xe(a,!l&&be(e,"script")),s},cleanData:function(e){for(var t,n,r,o=S.event.special,i=0;void 0!==(n=e[i]);i++)if(V(n)){if(t=n[X.expando]){if(t.events)for(r in t.events)o[r]?S.event.remove(n,r):S.removeEvent(n,r,t.handle);n[X.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),S.fn.extend({detach:function(e){return Re(this,e,!0)},remove:function(e){return Re(this,e)},text:function(e){return G(this,(function(e){return void 0===e?S.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Me(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||$e(this,e).appendChild(e)}))},prepend:function(){return Me(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=$e(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Me(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Me(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(S.cleanData(be(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return S.clone(this,e,t)}))},html:function(e){return G(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Be.test(e)&&!ve[(Ae.exec(e)||["",""])[1].toLowerCase()]){e=S.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(S.cleanData(be(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Me(this,arguments,(function(t){var n=this.parentNode;S.inArray(this,e)<0&&(S.cleanData(be(this)),n&&n.replaceChild(t,this))}),e)}}),S.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){S.fn[e]=function(e){for(var n,r=[],o=S(e),i=o.length-1,a=0;a<=i;a++)n=a===i?this:this.clone(!0),S(o[a])[t](n),c.apply(r,n.get());return this.pushStack(r)}}));var We=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),Fe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=r),t.getComputedStyle(e)},He=function(e,t,n){var r,o,i={};for(o in t)i[o]=e.style[o],e.style[o]=t[o];for(o in r=n.call(e),t)e.style[o]=i[o];return r},Ue=new RegExp(ie.join("|"),"i");function _e(e,t,n){var r,o,i,a,s=e.style;return(n=n||Fe(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||se(e)||(a=S.style(e,t)),!g.pixelBoxStyles()&&We.test(a)&&Ue.test(t)&&(r=s.width,o=s.minWidth,i=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=o,s.maxWidth=i)),void 0!==a?a+"":a}function Ge(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ae.appendChild(c).appendChild(u);var e=r.getComputedStyle(u);n="1%"!==e.top,l=12===t(e.marginLeft),u.style.right="60%",a=36===t(e.right),o=36===t(e.width),u.style.position="absolute",i=12===t(u.offsetWidth/3),ae.removeChild(c),u=null}}function t(e){return Math.round(parseFloat(e))}var n,o,i,a,s,l,c=v.createElement("div"),u=v.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===u.style.backgroundClip,S.extend(g,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,n,o;return null==s&&(e=v.createElement("table"),t=v.createElement("tr"),n=v.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",ae.appendChild(e).appendChild(t).appendChild(n),o=r.getComputedStyle(t),s=parseInt(o.height,10)+parseInt(o.borderTopWidth,10)+parseInt(o.borderBottomWidth,10)===t.offsetHeight,ae.removeChild(e)),s}}))}();var ze=["Webkit","Moz","ms"],Je=v.createElement("div").style,Qe={};function Ye(e){return S.cssProps[e]||Qe[e]||(e in Je?e:Qe[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=ze.length;n--;)if((e=ze[n]+t)in Je)return e}(e)||e)}var Ve=/^(none|table(?!-c[ea]).+)/,Ke=/^--/,Xe={position:"absolute",visibility:"hidden",display:"block"},Ze={letterSpacing:"0",fontWeight:"400"};function et(e,t,n){var r=oe.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function tt(e,t,n,r,o,i){var a="width"===t?1:0,s=0,l=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=S.css(e,n+ie[a],!0,o)),r?("content"===n&&(l-=S.css(e,"padding"+ie[a],!0,o)),"margin"!==n&&(l-=S.css(e,"border"+ie[a]+"Width",!0,o))):(l+=S.css(e,"padding"+ie[a],!0,o),"padding"!==n?l+=S.css(e,"border"+ie[a]+"Width",!0,o):s+=S.css(e,"border"+ie[a]+"Width",!0,o));return!r&&i>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-l-s-.5))||0),l}function nt(e,t,n){var r=Fe(e),o=(!g.boxSizingReliable()||n)&&"border-box"===S.css(e,"boxSizing",!1,r),i=o,a=_e(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(We.test(a)){if(!n)return a;a="auto"}return(!g.boxSizingReliable()&&o||!g.reliableTrDimensions()&&B(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===S.css(e,"display",!1,r))&&e.getClientRects().length&&(o="border-box"===S.css(e,"boxSizing",!1,r),(i=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+tt(e,t,n||(o?"border":"content"),i,r,a)+"px"}function rt(e,t,n,r,o){return new rt.prototype.init(e,t,n,r,o)}S.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=_e(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,i,a,s=Y(t),l=Ke.test(t),c=e.style;if(l||(t=Ye(s)),a=S.cssHooks[t]||S.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(o=a.get(e,!1,r))?o:c[t];"string"==(i=typeof n)&&(o=oe.exec(n))&&o[1]&&(n=ue(e,t,o),i="number"),null!=n&&n==n&&("number"!==i||l||(n+=o&&o[3]||(S.cssNumber[s]?"":"px")),g.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,r){var o,i,a,s=Y(t);return Ke.test(t)||(t=Ye(s)),(a=S.cssHooks[t]||S.cssHooks[s])&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=_e(e,t,r)),"normal"===o&&t in Ze&&(o=Ze[t]),""===n||n?(i=parseFloat(o),!0===n||isFinite(i)?i||0:o):o}}),S.each(["height","width"],(function(e,t){S.cssHooks[t]={get:function(e,n,r){if(n)return!Ve.test(S.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?nt(e,t,r):He(e,Xe,(function(){return nt(e,t,r)}))},set:function(e,n,r){var o,i=Fe(e),a=!g.scrollboxSize()&&"absolute"===i.position,s=(a||r)&&"border-box"===S.css(e,"boxSizing",!1,i),l=r?tt(e,t,r,s,i):0;return s&&a&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-tt(e,t,"border",!1,i)-.5)),l&&(o=oe.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=S.css(e,t)),et(0,n,l)}}})),S.cssHooks.marginLeft=Ge(g.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(_e(e,"marginLeft"))||e.getBoundingClientRect().left-He(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),S.each({margin:"",padding:"",border:"Width"},(function(e,t){S.cssHooks[e+t]={expand:function(n){for(var r=0,o={},i="string"==typeof n?n.split(" "):[n];r<4;r++)o[e+ie[r]+t]=i[r]||i[r-2]||i[0];return o}},"margin"!==e&&(S.cssHooks[e+t].set=et)})),S.fn.extend({css:function(e,t){return G(this,(function(e,t,n){var r,o,i={},a=0;if(Array.isArray(t)){for(r=Fe(e),o=t.length;a<o;a++)i[t[a]]=S.css(e,t[a],!1,r);return i}return void 0!==n?S.style(e,t,n):S.css(e,t)}),e,t,arguments.length>1)}}),S.Tween=rt,rt.prototype={constructor:rt,init:function(e,t,n,r,o,i){this.elem=e,this.prop=n,this.easing=o||S.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(S.cssNumber[n]?"":"px")},cur:function(){var e=rt.propHooks[this.prop];return e&&e.get?e.get(this):rt.propHooks._default.get(this)},run:function(e){var t,n=rt.propHooks[this.prop];return this.options.duration?this.pos=t=S.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rt.propHooks._default.set(this),this}},rt.prototype.init.prototype=rt.prototype,rt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=S.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){S.fx.step[e.prop]?S.fx.step[e.prop](e):1!==e.elem.nodeType||!S.cssHooks[e.prop]&&null==e.elem.style[Ye(e.prop)]?e.elem[e.prop]=e.now:S.style(e.elem,e.prop,e.now+e.unit)}}},rt.propHooks.scrollTop=rt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},S.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},S.fx=rt.prototype.init,S.fx.step={};var ot,it,at=/^(?:toggle|show|hide)$/,st=/queueHooks$/;function lt(){it&&(!1===v.hidden&&r.requestAnimationFrame?r.requestAnimationFrame(lt):r.setTimeout(lt,S.fx.interval),S.fx.tick())}function ct(){return r.setTimeout((function(){ot=void 0})),ot=Date.now()}function ut(e,t){var n,r=0,o={height:e};for(t=t?1:0;r<4;r+=2-t)o["margin"+(n=ie[r])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function pt(e,t,n){for(var r,o=(ft.tweeners[t]||[]).concat(ft.tweeners["*"]),i=0,a=o.length;i<a;i++)if(r=o[i].call(n,t,e))return r}function ft(e,t,n){var r,o,i=0,a=ft.prefilters.length,s=S.Deferred().always((function(){delete l.elem})),l=function(){if(o)return!1;for(var t=ot||ct(),n=Math.max(0,c.startTime+c.duration-t),r=1-(n/c.duration||0),i=0,a=c.tweens.length;i<a;i++)c.tweens[i].run(r);return s.notifyWith(e,[c,r,n]),r<1&&a?n:(a||s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:S.extend({},t),opts:S.extend(!0,{specialEasing:{},easing:S.easing._default},n),originalProperties:t,originalOptions:n,startTime:ot||ct(),duration:n.duration,tweens:[],createTween:function(t,n){var r=S.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(o)return this;for(o=!0;n<r;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),u=c.props;for(function(e,t){var n,r,o,i,a;for(n in e)if(o=t[r=Y(n)],i=e[n],Array.isArray(i)&&(o=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(a=S.cssHooks[r])&&"expand"in a)for(n in i=a.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=o);else t[r]=o}(u,c.opts.specialEasing);i<a;i++)if(r=ft.prefilters[i].call(c,e,u,c.opts))return A(r.stop)&&(S._queueHooks(c.elem,c.opts.queue).stop=r.stop.bind(r)),r;return S.map(u,pt,c),A(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),S.fx.timer(S.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}S.Animation=S.extend(ft,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,oe.exec(t),n),n}]},tweener:function(e,t){A(e)?(t=e,e=["*"]):e=e.match(M);for(var n,r=0,o=e.length;r<o;r++)n=e[r],ft.tweeners[n]=ft.tweeners[n]||[],ft.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,o,i,a,s,l,c,u,p="width"in t||"height"in t,f=this,d={},h=e.style,y=e.nodeType&&ce(e),g=X.get(e,"fxshow");for(r in n.queue||(null==(a=S._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,f.always((function(){f.always((function(){a.unqueued--,S.queue(e,"fx").length||a.empty.fire()}))}))),t)if(o=t[r],at.test(o)){if(delete t[r],i=i||"toggle"===o,o===(y?"hide":"show")){if("show"!==o||!g||void 0===g[r])continue;y=!0}d[r]=g&&g[r]||S.style(e,r)}if((l=!S.isEmptyObject(t))||!S.isEmptyObject(d))for(r in p&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=g&&g.display)&&(c=X.get(e,"display")),"none"===(u=S.css(e,"display"))&&(c?u=c:(de([e],!0),c=e.style.display||c,u=S.css(e,"display"),de([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===S.css(e,"float")&&(l||(f.done((function(){h.display=c})),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",f.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),l=!1,d)l||(g?"hidden"in g&&(y=g.hidden):g=X.access(e,"fxshow",{display:c}),i&&(g.hidden=!y),y&&de([e],!0),f.done((function(){for(r in y||de([e]),X.remove(e,"fxshow"),d)S.style(e,r,d[r])}))),l=pt(y?g[r]:0,r,f),r in g||(g[r]=l.start,y&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?ft.prefilters.unshift(e):ft.prefilters.push(e)}}),S.speed=function(e,t,n){var r=e&&"object"==typeof e?S.extend({},e):{complete:n||!n&&t||A(e)&&e,duration:e,easing:n&&t||t&&!A(t)&&t};return S.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in S.fx.speeds?r.duration=S.fx.speeds[r.duration]:r.duration=S.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){A(r.old)&&r.old.call(this),r.queue&&S.dequeue(this,r.queue)},r},S.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ce).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var o=S.isEmptyObject(e),i=S.speed(t,n,r),a=function(){var t=ft(this,S.extend({},e),i);(o||X.get(this,"finish"))&&t.stop(!0)};return a.finish=a,o||!1===i.queue?this.each(a):this.queue(i.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,o=null!=e&&e+"queueHooks",i=S.timers,a=X.get(this);if(o)a[o]&&a[o].stop&&r(a[o]);else for(o in a)a[o]&&a[o].stop&&st.test(o)&&r(a[o]);for(o=i.length;o--;)i[o].elem!==this||null!=e&&i[o].queue!==e||(i[o].anim.stop(n),t=!1,i.splice(o,1));!t&&n||S.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=X.get(this),r=n[e+"queue"],o=n[e+"queueHooks"],i=S.timers,a=r?r.length:0;for(n.finish=!0,S.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),S.each(["toggle","show","hide"],(function(e,t){var n=S.fn[t];S.fn[t]=function(e,r,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ut(t,!0),e,r,o)}})),S.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){S.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),S.timers=[],S.fx.tick=function(){var e,t=0,n=S.timers;for(ot=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||S.fx.stop(),ot=void 0},S.fx.timer=function(e){S.timers.push(e),S.fx.start()},S.fx.interval=13,S.fx.start=function(){it||(it=!0,lt())},S.fx.stop=function(){it=null},S.fx.speeds={slow:600,fast:200,_default:400},S.fn.delay=function(e,t){return e=S.fx&&S.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var o=r.setTimeout(t,e);n.stop=function(){r.clearTimeout(o)}}))},function(){var e=v.createElement("input"),t=v.createElement("select").appendChild(v.createElement("option"));e.type="checkbox",g.checkOn=""!==e.value,g.optSelected=t.selected,(e=v.createElement("input")).value="t",e.type="radio",g.radioValue="t"===e.value}();var dt,ht=S.expr.attrHandle;S.fn.extend({attr:function(e,t){return G(this,S.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){S.removeAttr(this,e)}))}}),S.extend({attr:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?S.prop(e,t,n):(1===i&&S.isXMLDoc(e)||(o=S.attrHooks[t.toLowerCase()]||(S.expr.match.bool.test(t)?dt:void 0)),void 0!==n?null===n?void S.removeAttr(e,t):o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(r=o.get(e,t))?r:null==(r=S.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!g.radioValue&&"radio"===t&&B(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,o=t&&t.match(M);if(o&&1===e.nodeType)for(;n=o[r++];)e.removeAttribute(n)}}),dt={set:function(e,t,n){return!1===t?S.removeAttr(e,n):e.setAttribute(n,n),n}},S.each(S.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=ht[t]||S.find.attr;ht[t]=function(e,t,r){var o,i,a=t.toLowerCase();return r||(i=ht[a],ht[a]=o,o=null!=n(e,t,r)?a:null,ht[a]=i),o}}));var yt=/^(?:input|select|textarea|button)$/i,gt=/^(?:a|area)$/i;function At(e){return(e.match(M)||[]).join(" ")}function mt(e){return e.getAttribute&&e.getAttribute("class")||""}function vt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(M)||[]}S.fn.extend({prop:function(e,t){return G(this,S.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[S.propFix[e]||e]}))}}),S.extend({prop:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&S.isXMLDoc(e)||(t=S.propFix[t]||t,o=S.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:e[t]=n:o&&"get"in o&&null!==(r=o.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=S.find.attr(e,"tabindex");return t?parseInt(t,10):yt.test(e.nodeName)||gt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(S.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),S.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){S.propFix[this.toLowerCase()]=this})),S.fn.extend({addClass:function(e){var t,n,r,o,i,a,s,l=0;if(A(e))return this.each((function(t){S(this).addClass(e.call(this,t,mt(this)))}));if((t=vt(e)).length)for(;n=this[l++];)if(o=mt(n),r=1===n.nodeType&&" "+At(o)+" "){for(a=0;i=t[a++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");o!==(s=At(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,o,i,a,s,l=0;if(A(e))return this.each((function(t){S(this).removeClass(e.call(this,t,mt(this)))}));if(!arguments.length)return this.attr("class","");if((t=vt(e)).length)for(;n=this[l++];)if(o=mt(n),r=1===n.nodeType&&" "+At(o)+" "){for(a=0;i=t[a++];)for(;r.indexOf(" "+i+" ")>-1;)r=r.replace(" "+i+" "," ");o!==(s=At(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):A(e)?this.each((function(n){S(this).toggleClass(e.call(this,n,mt(this),t),t)})):this.each((function(){var t,o,i,a;if(r)for(o=0,i=S(this),a=vt(e);t=a[o++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=mt(this))&&X.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":X.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+At(mt(n))+" ").indexOf(t)>-1)return!0;return!1}});var bt=/\r/g;S.fn.extend({val:function(e){var t,n,r,o=this[0];return arguments.length?(r=A(e),this.each((function(n){var o;1===this.nodeType&&(null==(o=r?e.call(this,n,S(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=S.map(o,(function(e){return null==e?"":e+""}))),(t=S.valHooks[this.type]||S.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))}))):o?(t=S.valHooks[o.type]||S.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(bt,""):null==n?"":n:void 0}}),S.extend({valHooks:{option:{get:function(e){var t=S.find.attr(e,"value");return null!=t?t:At(S.text(e))}},select:{get:function(e){var t,n,r,o=e.options,i=e.selectedIndex,a="select-one"===e.type,s=a?null:[],l=a?i+1:o.length;for(r=i<0?l:a?i:0;r<l;r++)if(((n=o[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!B(n.parentNode,"optgroup"))){if(t=S(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,r,o=e.options,i=S.makeArray(t),a=o.length;a--;)((r=o[a]).selected=S.inArray(S.valHooks.option.get(r),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),S.each(["radio","checkbox"],(function(){S.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=S.inArray(S(e).val(),t)>-1}},g.checkOn||(S.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),g.focusin="onfocusin"in r;var xt=/^(?:focusinfocus|focusoutblur)$/,Ct=function(e){e.stopPropagation()};S.extend(S.event,{trigger:function(e,t,n,o){var i,a,s,l,c,u,p,f,h=[n||v],y=d.call(e,"type")?e.type:e,g=d.call(e,"namespace")?e.namespace.split("."):[];if(a=f=s=n=n||v,3!==n.nodeType&&8!==n.nodeType&&!xt.test(y+S.event.triggered)&&(y.indexOf(".")>-1&&(g=y.split("."),y=g.shift(),g.sort()),c=y.indexOf(":")<0&&"on"+y,(e=e[S.expando]?e:new S.Event(y,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=g.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:S.makeArray(t,[e]),p=S.event.special[y]||{},o||!p.trigger||!1!==p.trigger.apply(n,t))){if(!o&&!p.noBubble&&!m(n)){for(l=p.delegateType||y,xt.test(l+y)||(a=a.parentNode);a;a=a.parentNode)h.push(a),s=a;s===(n.ownerDocument||v)&&h.push(s.defaultView||s.parentWindow||r)}for(i=0;(a=h[i++])&&!e.isPropagationStopped();)f=a,e.type=i>1?l:p.bindType||y,(u=(X.get(a,"events")||Object.create(null))[e.type]&&X.get(a,"handle"))&&u.apply(a,t),(u=c&&a[c])&&u.apply&&V(a)&&(e.result=u.apply(a,t),!1===e.result&&e.preventDefault());return e.type=y,o||e.isDefaultPrevented()||p._default&&!1!==p._default.apply(h.pop(),t)||!V(n)||c&&A(n[y])&&!m(n)&&((s=n[c])&&(n[c]=null),S.event.triggered=y,e.isPropagationStopped()&&f.addEventListener(y,Ct),n[y](),e.isPropagationStopped()&&f.removeEventListener(y,Ct),S.event.triggered=void 0,s&&(n[c]=s)),e.result}},simulate:function(e,t,n){var r=S.extend(new S.Event,n,{type:e,isSimulated:!0});S.event.trigger(r,null,t)}}),S.fn.extend({trigger:function(e,t){return this.each((function(){S.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return S.event.trigger(e,t,n,!0)}}),g.focusin||S.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){S.event.simulate(t,e.target,S.event.fix(e))};S.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,o=X.access(r,t);o||r.addEventListener(e,n,!0),X.access(r,t,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,o=X.access(r,t)-1;o?X.access(r,t,o):(r.removeEventListener(e,n,!0),X.remove(r,t))}}}));var wt=r.location,St={guid:Date.now()},Tt=/\?/;S.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new r.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||S.error("Invalid XML: "+(n?S.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var jt=/\[\]$/,kt=/\r?\n/g,Et=/^(?:submit|button|image|reset|file)$/i,Dt=/^(?:input|select|textarea|keygen)/i;function Bt(e,t,n,r){var o;if(Array.isArray(t))S.each(t,(function(t,o){n||jt.test(e)?r(e,o):Bt(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,r)}));else if(n||"object"!==C(t))r(e,t);else for(o in t)Bt(e+"["+o+"]",t[o],n,r)}S.param=function(e,t){var n,r=[],o=function(e,t){var n=A(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!S.isPlainObject(e))S.each(e,(function(){o(this.name,this.value)}));else for(n in e)Bt(n,e[n],t,o);return r.join("&")},S.fn.extend({serialize:function(){return S.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=S.prop(this,"elements");return e?S.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!S(this).is(":disabled")&&Dt.test(this.nodeName)&&!Et.test(e)&&(this.checked||!ge.test(e))})).map((function(e,t){var n=S(this).val();return null==n?null:Array.isArray(n)?S.map(n,(function(e){return{name:t.name,value:e.replace(kt,"\r\n")}})):{name:t.name,value:n.replace(kt,"\r\n")}})).get()}});var Ot=/%20/g,Nt=/#.*$/,$t=/([?&])_=[^&]*/,It=/^(.*?):[ \t]*([^\r\n]*)$/gm,Pt=/^(?:GET|HEAD)$/,Lt=/^\/\//,qt={},Mt={},Rt="*/".concat("*"),Wt=v.createElement("a");function Ft(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,o=0,i=t.toLowerCase().match(M)||[];if(A(n))for(;r=i[o++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Ht(e,t,n,r){var o={},i=e===Mt;function a(s){var l;return o[s]=!0,S.each(e[s]||[],(function(e,s){var c=s(t,n,r);return"string"!=typeof c||i||o[c]?i?!(l=c):void 0:(t.dataTypes.unshift(c),a(c),!1)})),l}return a(t.dataTypes[0])||!o["*"]&&a("*")}function Ut(e,t){var n,r,o=S.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:r||(r={}))[n]=t[n]);return r&&S.extend(!0,e,r),e}Wt.href=wt.href,S.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:wt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(wt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Rt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":S.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Ut(Ut(e,S.ajaxSettings),t):Ut(S.ajaxSettings,e)},ajaxPrefilter:Ft(qt),ajaxTransport:Ft(Mt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,o,i,a,s,l,c,u,p,f,d=S.ajaxSetup({},t),h=d.context||d,y=d.context&&(h.nodeType||h.jquery)?S(h):S.event,g=S.Deferred(),A=S.Callbacks("once memory"),m=d.statusCode||{},b={},x={},C="canceled",w={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=It.exec(i);)a[t[1].toLowerCase()+" "]=(a[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=a[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?i:null},setRequestHeader:function(e,t){return null==c&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==c&&(d.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)w.always(e[w.status]);else for(t in e)m[t]=[m[t],e[t]];return this},abort:function(e){var t=e||C;return n&&n.abort(t),T(0,t),this}};if(g.promise(w),d.url=((e||d.url||wt.href)+"").replace(Lt,wt.protocol+"//"),d.type=t.method||t.type||d.method||d.type,d.dataTypes=(d.dataType||"*").toLowerCase().match(M)||[""],null==d.crossDomain){l=v.createElement("a");try{l.href=d.url,l.href=l.href,d.crossDomain=Wt.protocol+"//"+Wt.host!=l.protocol+"//"+l.host}catch(e){d.crossDomain=!0}}if(d.data&&d.processData&&"string"!=typeof d.data&&(d.data=S.param(d.data,d.traditional)),Ht(qt,d,t,w),c)return w;for(p in(u=S.event&&d.global)&&0==S.active++&&S.event.trigger("ajaxStart"),d.type=d.type.toUpperCase(),d.hasContent=!Pt.test(d.type),o=d.url.replace(Nt,""),d.hasContent?d.data&&d.processData&&0===(d.contentType||"").indexOf("application/x-www-form-urlencoded")&&(d.data=d.data.replace(Ot,"+")):(f=d.url.slice(o.length),d.data&&(d.processData||"string"==typeof d.data)&&(o+=(Tt.test(o)?"&":"?")+d.data,delete d.data),!1===d.cache&&(o=o.replace($t,"$1"),f=(Tt.test(o)?"&":"?")+"_="+St.guid+++f),d.url=o+f),d.ifModified&&(S.lastModified[o]&&w.setRequestHeader("If-Modified-Since",S.lastModified[o]),S.etag[o]&&w.setRequestHeader("If-None-Match",S.etag[o])),(d.data&&d.hasContent&&!1!==d.contentType||t.contentType)&&w.setRequestHeader("Content-Type",d.contentType),w.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+("*"!==d.dataTypes[0]?", "+Rt+"; q=0.01":""):d.accepts["*"]),d.headers)w.setRequestHeader(p,d.headers[p]);if(d.beforeSend&&(!1===d.beforeSend.call(h,w,d)||c))return w.abort();if(C="abort",A.add(d.complete),w.done(d.success),w.fail(d.error),n=Ht(Mt,d,t,w)){if(w.readyState=1,u&&y.trigger("ajaxSend",[w,d]),c)return w;d.async&&d.timeout>0&&(s=r.setTimeout((function(){w.abort("timeout")}),d.timeout));try{c=!1,n.send(b,T)}catch(e){if(c)throw e;T(-1,e)}}else T(-1,"No Transport");function T(e,t,a,l){var p,f,v,b,x,C=t;c||(c=!0,s&&r.clearTimeout(s),n=void 0,i=l||"",w.readyState=e>0?4:0,p=e>=200&&e<300||304===e,a&&(b=function(e,t,n){for(var r,o,i,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(o in s)if(s[o]&&s[o].test(r)){l.unshift(o);break}if(l[0]in n)i=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){i=o;break}a||(a=o)}i=i||a}if(i)return i!==l[0]&&l.unshift(i),n[i]}(d,w,a)),!p&&S.inArray("script",d.dataTypes)>-1&&S.inArray("json",d.dataTypes)<0&&(d.converters["text script"]=function(){}),b=function(e,t,n,r){var o,i,a,s,l,c={},u=e.dataTypes.slice();if(u[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(i=u.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=i,i=u.shift())if("*"===i)i=l;else if("*"!==l&&l!==i){if(!(a=c[l+" "+i]||c["* "+i]))for(o in c)if((s=o.split(" "))[1]===i&&(a=c[l+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[o]:!0!==c[o]&&(i=s[0],u.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+i}}}return{state:"success",data:t}}(d,b,w,p),p?(d.ifModified&&((x=w.getResponseHeader("Last-Modified"))&&(S.lastModified[o]=x),(x=w.getResponseHeader("etag"))&&(S.etag[o]=x)),204===e||"HEAD"===d.type?C="nocontent":304===e?C="notmodified":(C=b.state,f=b.data,p=!(v=b.error))):(v=C,!e&&C||(C="error",e<0&&(e=0))),w.status=e,w.statusText=(t||C)+"",p?g.resolveWith(h,[f,C,w]):g.rejectWith(h,[w,C,v]),w.statusCode(m),m=void 0,u&&y.trigger(p?"ajaxSuccess":"ajaxError",[w,d,p?f:v]),A.fireWith(h,[w,C]),u&&(y.trigger("ajaxComplete",[w,d]),--S.active||S.event.trigger("ajaxStop")))}return w},getJSON:function(e,t,n){return S.get(e,t,n,"json")},getScript:function(e,t){return S.get(e,void 0,t,"script")}}),S.each(["get","post"],(function(e,t){S[t]=function(e,n,r,o){return A(n)&&(o=o||r,r=n,n=void 0),S.ajax(S.extend({url:e,type:t,dataType:o,data:n,success:r},S.isPlainObject(e)&&e))}})),S.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),S._evalUrl=function(e,t,n){return S.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){S.globalEval(e,t,n)}})},S.fn.extend({wrapAll:function(e){var t;return this[0]&&(A(e)&&(e=e.call(this[0])),t=S(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return A(e)?this.each((function(t){S(this).wrapInner(e.call(this,t))})):this.each((function(){var t=S(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=A(e);return this.each((function(n){S(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){S(this).replaceWith(this.childNodes)})),this}}),S.expr.pseudos.hidden=function(e){return!S.expr.pseudos.visible(e)},S.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},S.ajaxSettings.xhr=function(){try{return new r.XMLHttpRequest}catch(e){}};var _t={0:200,1223:204},Gt=S.ajaxSettings.xhr();g.cors=!!Gt&&"withCredentials"in Gt,g.ajax=Gt=!!Gt,S.ajaxTransport((function(e){var t,n;if(g.cors||Gt&&!e.crossDomain)return{send:function(o,i){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)s.setRequestHeader(a,o[a]);t=function(e){return function(){t&&(t=n=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?i(0,"error"):i(s.status,s.statusText):i(_t[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),n=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=n:s.onreadystatechange=function(){4===s.readyState&&r.setTimeout((function(){t&&n()}))},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),S.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),S.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return S.globalEval(e),e}}}),S.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),S.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,o){t=S("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),v.head.appendChild(t[0])},abort:function(){n&&n()}}}));var zt,Jt=[],Qt=/(=)\?(?=&|$)|\?\?/;S.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Jt.pop()||S.expando+"_"+St.guid++;return this[e]=!0,e}}),S.ajaxPrefilter("json jsonp",(function(e,t,n){var o,i,a,s=!1!==e.jsonp&&(Qt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Qt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=A(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Qt,"$1"+o):!1!==e.jsonp&&(e.url+=(Tt.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return a||S.error(o+" was not called"),a[0]},e.dataTypes[0]="json",i=r[o],r[o]=function(){a=arguments},n.always((function(){void 0===i?S(r).removeProp(o):r[o]=i,e[o]&&(e.jsonpCallback=t.jsonpCallback,Jt.push(o)),a&&A(i)&&i(a[0]),a=i=void 0})),"script"})),g.createHTMLDocument=((zt=v.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===zt.childNodes.length),S.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(g.createHTMLDocument?((r=(t=v.implementation.createHTMLDocument("")).createElement("base")).href=v.location.href,t.head.appendChild(r)):t=v),i=!n&&[],(o=O.exec(e))?[t.createElement(o[1])]:(o=we([e],t,i),i&&i.length&&S(i).remove(),S.merge([],o.childNodes)));var r,o,i},S.fn.load=function(e,t,n){var r,o,i,a=this,s=e.indexOf(" ");return s>-1&&(r=At(e.slice(s)),e=e.slice(0,s)),A(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),a.length>0&&S.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done((function(e){i=arguments,a.html(r?S("<div>").append(S.parseHTML(e)).find(r):e)})).always(n&&function(e,t){a.each((function(){n.apply(this,i||[e.responseText,t,e])}))}),this},S.expr.pseudos.animated=function(e){return S.grep(S.timers,(function(t){return e===t.elem})).length},S.offset={setOffset:function(e,t,n){var r,o,i,a,s,l,c=S.css(e,"position"),u=S(e),p={};"static"===c&&(e.style.position="relative"),s=u.offset(),i=S.css(e,"top"),l=S.css(e,"left"),("absolute"===c||"fixed"===c)&&(i+l).indexOf("auto")>-1?(a=(r=u.position()).top,o=r.left):(a=parseFloat(i)||0,o=parseFloat(l)||0),A(t)&&(t=t.call(e,n,S.extend({},s))),null!=t.top&&(p.top=t.top-s.top+a),null!=t.left&&(p.left=t.left-s.left+o),"using"in t?t.using.call(e,p):u.css(p)}},S.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){S.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],o={top:0,left:0};if("fixed"===S.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===S.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((o=S(e).offset()).top+=S.css(e,"borderTopWidth",!0),o.left+=S.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-S.css(r,"marginTop",!0),left:t.left-o.left-S.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===S.css(e,"position");)e=e.offsetParent;return e||ae}))}}),S.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;S.fn[e]=function(r){return G(this,(function(e,r,o){var i;if(m(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===o)return i?i[t]:e[r];i?i.scrollTo(n?i.pageXOffset:o,n?o:i.pageYOffset):e[r]=o}),e,r,arguments.length)}})),S.each(["top","left"],(function(e,t){S.cssHooks[t]=Ge(g.pixelPosition,(function(e,n){if(n)return n=_e(e,t),We.test(n)?S(e).position()[t]+"px":n}))})),S.each({Height:"height",Width:"width"},(function(e,t){S.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){S.fn[r]=function(o,i){var a=arguments.length&&(n||"boolean"!=typeof o),s=n||(!0===o||!0===i?"margin":"border");return G(this,(function(t,n,o){var i;return m(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===o?S.css(t,n,s):S.style(t,n,o,s)}),t,a?o:void 0,a)}}))})),S.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){S.fn[t]=function(e){return this.on(t,e)}})),S.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),S.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){S.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Yt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;S.proxy=function(e,t){var n,r,o;if("string"==typeof t&&(n=e[t],t=e,e=n),A(e))return r=s.call(arguments,2),o=function(){return e.apply(t||this,r.concat(s.call(arguments)))},o.guid=e.guid=e.guid||S.guid++,o},S.holdReady=function(e){e?S.readyWait++:S.ready(!0)},S.isArray=Array.isArray,S.parseJSON=JSON.parse,S.nodeName=B,S.isFunction=A,S.isWindow=m,S.camelCase=Y,S.type=C,S.now=Date.now,S.isNumeric=function(e){var t=S.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},S.trim=function(e){return null==e?"":(e+"").replace(Yt,"")},void 0===(n=function(){return S}.apply(t,[]))||(e.exports=n);var Vt=r.jQuery,Kt=r.$;return S.noConflict=function(e){return r.$===S&&(r.$=Kt),e&&r.jQuery===S&&(r.jQuery=Vt),S},void 0===o&&(r.jQuery=r.$=S),S}))},305:e=>{e.exports=function e(t,n,r){function o(a,s){if(!n[a]){if(!t[a]){if(i)return i(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var c=n[a]={exports:{}};t[a][0].call(c.exports,(function(e){return o(t[a][1][e]||e)}),c,c.exports,e,t,n,r)}return n[a].exports}for(var i=void 0,a=0;a<r.length;a++)o(r[a]);return o}({1:[function(e,t,n){"use strict";var r=String.prototype.replace,o=/%20/g,i="RFC1738",a="RFC3986";t.exports={default:a,formatters:{RFC1738:function(e){return r.call(e,o,"+")},RFC3986:function(e){return String(e)}},RFC1738:i,RFC3986:a}},{}],2:[function(e,t,n){"use strict";var r=e("./stringify"),o=e("./parse"),i=e("./formats");t.exports={formats:i,parse:o,stringify:r}},{"./formats":1,"./parse":3,"./stringify":4}],3:[function(e,t,n){"use strict";var r=e("./utils"),o=Object.prototype.hasOwnProperty,i=Array.isArray,a={allowDots:!1,allowPrototypes:!1,allowSparse:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:r.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},s=function(e){return e.replace(/&#(\d+);/g,(function(e,t){return String.fromCharCode(parseInt(t,10))}))},l=function(e,t){return e&&"string"==typeof e&&t.comma&&e.indexOf(",")>-1?e.split(","):e},c=function(e,t,n,r){if(e){var i=n.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,a=/(\[[^[\]]*])/g,s=n.depth>0&&/(\[[^[\]]*])/.exec(i),c=s?i.slice(0,s.index):i,u=[];if(c){if(!n.plainObjects&&o.call(Object.prototype,c)&&!n.allowPrototypes)return;u.push(c)}for(var p=0;n.depth>0&&null!==(s=a.exec(i))&&p<n.depth;){if(p+=1,!n.plainObjects&&o.call(Object.prototype,s[1].slice(1,-1))&&!n.allowPrototypes)return;u.push(s[1])}return s&&u.push("["+i.slice(s.index)+"]"),function(e,t,n,r){for(var o=r?t:l(t,n),i=e.length-1;i>=0;--i){var a,s=e[i];if("[]"===s&&n.parseArrays)a=[].concat(o);else{a=n.plainObjects?Object.create(null):{};var c="["===s.charAt(0)&&"]"===s.charAt(s.length-1)?s.slice(1,-1):s,u=parseInt(c,10);n.parseArrays||""!==c?!isNaN(u)&&s!==c&&String(u)===c&&u>=0&&n.parseArrays&&u<=n.arrayLimit?(a=[])[u]=o:a[c]=o:a={0:o}}o=a}return o}(u,t,n,r)}};t.exports=function(e,t){var n=function(e){if(!e)return a;if(null!==e.decoder&&void 0!==e.decoder&&"function"!=typeof e.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var t=void 0===e.charset?a.charset:e.charset;return{allowDots:void 0===e.allowDots?a.allowDots:!!e.allowDots,allowPrototypes:"boolean"==typeof e.allowPrototypes?e.allowPrototypes:a.allowPrototypes,allowSparse:"boolean"==typeof e.allowSparse?e.allowSparse:a.allowSparse,arrayLimit:"number"==typeof e.arrayLimit?e.arrayLimit:a.arrayLimit,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:a.charsetSentinel,comma:"boolean"==typeof e.comma?e.comma:a.comma,decoder:"function"==typeof e.decoder?e.decoder:a.decoder,delimiter:"string"==typeof e.delimiter||r.isRegExp(e.delimiter)?e.delimiter:a.delimiter,depth:"number"==typeof e.depth||!1===e.depth?+e.depth:a.depth,ignoreQueryPrefix:!0===e.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof e.interpretNumericEntities?e.interpretNumericEntities:a.interpretNumericEntities,parameterLimit:"number"==typeof e.parameterLimit?e.parameterLimit:a.parameterLimit,parseArrays:!1!==e.parseArrays,plainObjects:"boolean"==typeof e.plainObjects?e.plainObjects:a.plainObjects,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:a.strictNullHandling}}(t);if(""===e||null==e)return n.plainObjects?Object.create(null):{};for(var u="string"==typeof e?function(e,t){var n,c={},u=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,p=t.parameterLimit===1/0?void 0:t.parameterLimit,f=u.split(t.delimiter,p),d=-1,h=t.charset;if(t.charsetSentinel)for(n=0;n<f.length;++n)0===f[n].indexOf("utf8=")&&("utf8=%E2%9C%93"===f[n]?h="utf-8":"utf8=%26%2310003%3B"===f[n]&&(h="iso-8859-1"),d=n,n=f.length);for(n=0;n<f.length;++n)if(n!==d){var y,g,A=f[n],m=A.indexOf("]="),v=-1===m?A.indexOf("="):m+1;-1===v?(y=t.decoder(A,a.decoder,h,"key"),g=t.strictNullHandling?null:""):(y=t.decoder(A.slice(0,v),a.decoder,h,"key"),g=r.maybeMap(l(A.slice(v+1),t),(function(e){return t.decoder(e,a.decoder,h,"value")}))),g&&t.interpretNumericEntities&&"iso-8859-1"===h&&(g=s(g)),A.indexOf("[]=")>-1&&(g=i(g)?[g]:g),o.call(c,y)?c[y]=r.combine(c[y],g):c[y]=g}return c}(e,n):e,p=n.plainObjects?Object.create(null):{},f=Object.keys(u),d=0;d<f.length;++d){var h=f[d],y=c(h,u[h],n,"string"==typeof e);p=r.merge(p,y,n)}return!0===n.allowSparse?p:r.compact(p)}},{"./utils":5}],4:[function(e,t,n){"use strict";var r=e("side-channel"),o=e("./utils"),i=e("./formats"),a=Object.prototype.hasOwnProperty,s={brackets:function(e){return e+"[]"},comma:"comma",indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},l=Array.isArray,c=String.prototype.split,u=Array.prototype.push,p=function(e,t){u.apply(e,l(t)?t:[t])},f=Date.prototype.toISOString,d=i.default,h={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:o.encode,encodeValuesOnly:!1,format:d,formatter:i.formatters[d],indices:!1,serializeDate:function(e){return f.call(e)},skipNulls:!1,strictNullHandling:!1},y={},g=function e(t,n,i,a,s,u,f,d,g,A,m,v,b,x,C){for(var w=t,S=C,T=0,j=!1;void 0!==(S=S.get(y))&&!j;){var k=S.get(t);if(T+=1,void 0!==k){if(k===T)throw new RangeError("Cyclic object value");j=!0}void 0===S.get(y)&&(T=0)}if("function"==typeof f?w=f(n,w):w instanceof Date?w=A(w):"comma"===i&&l(w)&&(w=o.maybeMap(w,(function(e){return e instanceof Date?A(e):e}))),null===w){if(a)return u&&!b?u(n,h.encoder,x,"key",m):n;w=""}if("string"==typeof(N=w)||"number"==typeof N||"boolean"==typeof N||"symbol"==typeof N||"bigint"==typeof N||o.isBuffer(w)){if(u){var E=b?n:u(n,h.encoder,x,"key",m);if("comma"===i&&b){for(var D=c.call(String(w),","),B="",O=0;O<D.length;++O)B+=(0===O?"":",")+v(u(D[O],h.encoder,x,"value",m));return[v(E)+"="+B]}return[v(E)+"="+v(u(w,h.encoder,x,"value",m))]}return[v(n)+"="+v(String(w))]}var N,$,I=[];if(void 0===w)return I;if("comma"===i&&l(w))$=[{value:w.length>0?w.join(",")||null:void 0}];else if(l(f))$=f;else{var P=Object.keys(w);$=d?P.sort(d):P}for(var L=0;L<$.length;++L){var q=$[L],M="object"==typeof q&&void 0!==q.value?q.value:w[q];if(!s||null!==M){var R=l(w)?"function"==typeof i?i(n,q):n:n+(g?"."+q:"["+q+"]");C.set(t,T);var W=r();W.set(y,C),p(I,e(M,R,i,a,s,u,f,d,g,A,m,v,b,x,W))}}return I};t.exports=function(e,t){var n,o=e,c=function(e){if(!e)return h;if(null!==e.encoder&&void 0!==e.encoder&&"function"!=typeof e.encoder)throw new TypeError("Encoder has to be a function.");var t=e.charset||h.charset;if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var n=i.default;if(void 0!==e.format){if(!a.call(i.formatters,e.format))throw new TypeError("Unknown format option provided.");n=e.format}var r=i.formatters[n],o=h.filter;return("function"==typeof e.filter||l(e.filter))&&(o=e.filter),{addQueryPrefix:"boolean"==typeof e.addQueryPrefix?e.addQueryPrefix:h.addQueryPrefix,allowDots:void 0===e.allowDots?h.allowDots:!!e.allowDots,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:h.charsetSentinel,delimiter:void 0===e.delimiter?h.delimiter:e.delimiter,encode:"boolean"==typeof e.encode?e.encode:h.encode,encoder:"function"==typeof e.encoder?e.encoder:h.encoder,encodeValuesOnly:"boolean"==typeof e.encodeValuesOnly?e.encodeValuesOnly:h.encodeValuesOnly,filter:o,format:n,formatter:r,serializeDate:"function"==typeof e.serializeDate?e.serializeDate:h.serializeDate,skipNulls:"boolean"==typeof e.skipNulls?e.skipNulls:h.skipNulls,sort:"function"==typeof e.sort?e.sort:null,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:h.strictNullHandling}}(t);"function"==typeof c.filter?o=(0,c.filter)("",o):l(c.filter)&&(n=c.filter);var u,f=[];if("object"!=typeof o||null===o)return"";u=t&&t.arrayFormat in s?t.arrayFormat:t&&"indices"in t?t.indices?"indices":"repeat":"indices";var d=s[u];n||(n=Object.keys(o)),c.sort&&n.sort(c.sort);for(var y=r(),A=0;A<n.length;++A){var m=n[A];c.skipNulls&&null===o[m]||p(f,g(o[m],m,d,c.strictNullHandling,c.skipNulls,c.encode?c.encoder:null,c.filter,c.sort,c.allowDots,c.serializeDate,c.format,c.formatter,c.encodeValuesOnly,c.charset,y))}var v=f.join(c.delimiter),b=!0===c.addQueryPrefix?"?":"";return c.charsetSentinel&&("iso-8859-1"===c.charset?b+="utf8=%26%2310003%3B&":b+="utf8=%E2%9C%93&"),v.length>0?b+v:""}},{"./formats":1,"./utils":5,"side-channel":16}],5:[function(e,t,n){"use strict";var r=e("./formats"),o=Object.prototype.hasOwnProperty,i=Array.isArray,a=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),s=function(e,t){for(var n=t&&t.plainObjects?Object.create(null):{},r=0;r<e.length;++r)void 0!==e[r]&&(n[r]=e[r]);return n};t.exports={arrayToObject:s,assign:function(e,t){return Object.keys(t).reduce((function(e,n){return e[n]=t[n],e}),e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],n=[],r=0;r<t.length;++r)for(var o=t[r],a=o.obj[o.prop],s=Object.keys(a),l=0;l<s.length;++l){var c=s[l],u=a[c];"object"==typeof u&&null!==u&&-1===n.indexOf(u)&&(t.push({obj:a,prop:c}),n.push(u))}return function(e){for(;e.length>1;){var t=e.pop(),n=t.obj[t.prop];if(i(n)){for(var r=[],o=0;o<n.length;++o)void 0!==n[o]&&r.push(n[o]);t.obj[t.prop]=r}}}(t),e},decode:function(e,t,n){var r=e.replace(/\+/g," ");if("iso-8859-1"===n)return r.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(r)}catch(e){return r}},encode:function(e,t,n,o,i){if(0===e.length)return e;var s=e;if("symbol"==typeof e?s=Symbol.prototype.toString.call(e):"string"!=typeof e&&(s=String(e)),"iso-8859-1"===n)return escape(s).replace(/%u[0-9a-f]{4}/gi,(function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"}));for(var l="",c=0;c<s.length;++c){var u=s.charCodeAt(c);45===u||46===u||95===u||126===u||u>=48&&u<=57||u>=65&&u<=90||u>=97&&u<=122||i===r.RFC1738&&(40===u||41===u)?l+=s.charAt(c):u<128?l+=a[u]:u<2048?l+=a[192|u>>6]+a[128|63&u]:u<55296||u>=57344?l+=a[224|u>>12]+a[128|u>>6&63]+a[128|63&u]:(c+=1,u=65536+((1023&u)<<10|1023&s.charCodeAt(c)),l+=a[240|u>>18]+a[128|u>>12&63]+a[128|u>>6&63]+a[128|63&u])}return l},isBuffer:function(e){return!(!e||"object"!=typeof e||!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e)))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},maybeMap:function(e,t){if(i(e)){for(var n=[],r=0;r<e.length;r+=1)n.push(t(e[r]));return n}return t(e)},merge:function e(t,n,r){if(!n)return t;if("object"!=typeof n){if(i(t))t.push(n);else{if(!t||"object"!=typeof t)return[t,n];(r&&(r.plainObjects||r.allowPrototypes)||!o.call(Object.prototype,n))&&(t[n]=!0)}return t}if(!t||"object"!=typeof t)return[t].concat(n);var a=t;return i(t)&&!i(n)&&(a=s(t,r)),i(t)&&i(n)?(n.forEach((function(n,i){if(o.call(t,i)){var a=t[i];a&&"object"==typeof a&&n&&"object"==typeof n?t[i]=e(a,n,r):t.push(n)}else t[i]=n})),t):Object.keys(n).reduce((function(t,i){var a=n[i];return o.call(t,i)?t[i]=e(t[i],a,r):t[i]=a,t}),a)}}},{"./formats":1}],6:[function(e,t,n){},{}],7:[function(e,t,n){"use strict";var r=e("get-intrinsic"),o=e("./"),i=o(r("String.prototype.indexOf"));t.exports=function(e,t){var n=r(e,!!t);return"function"==typeof n&&i(e,".prototype.")>-1?o(n):n}},{"./":8,"get-intrinsic":11}],8:[function(e,t,n){"use strict";var r=e("function-bind"),o=e("get-intrinsic"),i=o("%Function.prototype.apply%"),a=o("%Function.prototype.call%"),s=o("%Reflect.apply%",!0)||r.call(a,i),l=o("%Object.getOwnPropertyDescriptor%",!0),c=o("%Object.defineProperty%",!0),u=o("%Math.max%");if(c)try{c({},"a",{value:1})}catch(e){c=null}t.exports=function(e){var t=s(r,a,arguments);return l&&c&&l(t,"length").configurable&&c(t,"length",{value:1+u(0,e.length-(arguments.length-1))}),t};var p=function(){return s(r,i,arguments)};c?c(t.exports,"apply",{value:p}):t.exports.apply=p},{"function-bind":10,"get-intrinsic":11}],9:[function(e,t,n){"use strict";var r="Function.prototype.bind called on incompatible ",o=Array.prototype.slice,i=Object.prototype.toString,a="[object Function]";t.exports=function(e){var t=this;if("function"!=typeof t||i.call(t)!==a)throw new TypeError(r+t);for(var n,s=o.call(arguments,1),l=function(){if(this instanceof n){var r=t.apply(this,s.concat(o.call(arguments)));return Object(r)===r?r:this}return t.apply(e,s.concat(o.call(arguments)))},c=Math.max(0,t.length-s.length),u=[],p=0;p<c;p++)u.push("$"+p);if(n=Function("binder","return function ("+u.join(",")+"){ return binder.apply(this,arguments); }")(l),t.prototype){var f=function(){};f.prototype=t.prototype,n.prototype=new f,f.prototype=null}return n}},{}],10:[function(e,t,n){"use strict";var r=e("./implementation");t.exports=Function.prototype.bind||r},{"./implementation":9}],11:[function(e,t,n){"use strict";var r,o=SyntaxError,i=Function,a=TypeError,s=function(e){try{return i('"use strict"; return ('+e+").constructor;")()}catch(e){}},l=Object.getOwnPropertyDescriptor;if(l)try{l({},"")}catch(e){l=null}var c=function(){throw new a},u=l?function(){try{return c}catch(e){try{return l(arguments,"callee").get}catch(e){return c}}}():c,p=e("has-symbols")(),f=Object.getPrototypeOf||function(e){return e.__proto__},d={},h="undefined"==typeof Uint8Array?r:f(Uint8Array),y={"%AggregateError%":"undefined"==typeof AggregateError?r:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?r:ArrayBuffer,"%ArrayIteratorPrototype%":p?f([][Symbol.iterator]()):r,"%AsyncFromSyncIteratorPrototype%":r,"%AsyncFunction%":d,"%AsyncGenerator%":d,"%AsyncGeneratorFunction%":d,"%AsyncIteratorPrototype%":d,"%Atomics%":"undefined"==typeof Atomics?r:Atomics,"%BigInt%":"undefined"==typeof BigInt?r:BigInt,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?r:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?r:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?r:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?r:FinalizationRegistry,"%Function%":i,"%GeneratorFunction%":d,"%Int8Array%":"undefined"==typeof Int8Array?r:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?r:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?r:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":p?f(f([][Symbol.iterator]())):r,"%JSON%":"object"==typeof JSON?JSON:r,"%Map%":"undefined"==typeof Map?r:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&p?f((new Map)[Symbol.iterator]()):r,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?r:Promise,"%Proxy%":"undefined"==typeof Proxy?r:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?r:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?r:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&p?f((new Set)[Symbol.iterator]()):r,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?r:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":p?f(""[Symbol.iterator]()):r,"%Symbol%":p?Symbol:r,"%SyntaxError%":o,"%ThrowTypeError%":u,"%TypedArray%":h,"%TypeError%":a,"%Uint8Array%":"undefined"==typeof Uint8Array?r:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?r:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?r:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?r:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?r:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?r:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?r:WeakSet},g=function e(t){var n;if("%AsyncFunction%"===t)n=s("async function () {}");else if("%GeneratorFunction%"===t)n=s("function* () {}");else if("%AsyncGeneratorFunction%"===t)n=s("async function* () {}");else if("%AsyncGenerator%"===t){var r=e("%AsyncGeneratorFunction%");r&&(n=r.prototype)}else if("%AsyncIteratorPrototype%"===t){var o=e("%AsyncGenerator%");o&&(n=f(o.prototype))}return y[t]=n,n},A={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},m=e("function-bind"),v=e("has"),b=m.call(Function.call,Array.prototype.concat),x=m.call(Function.apply,Array.prototype.splice),C=m.call(Function.call,String.prototype.replace),w=m.call(Function.call,String.prototype.slice),S=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,T=/\\(\\)?/g,j=function(e){var t=w(e,0,1),n=w(e,-1);if("%"===t&&"%"!==n)throw new o("invalid intrinsic syntax, expected closing `%`");if("%"===n&&"%"!==t)throw new o("invalid intrinsic syntax, expected opening `%`");var r=[];return C(e,S,(function(e,t,n,o){r[r.length]=n?C(o,T,"$1"):t||e})),r},k=function(e,t){var n,r=e;if(v(A,r)&&(r="%"+(n=A[r])[0]+"%"),v(y,r)){var i=y[r];if(i===d&&(i=g(r)),void 0===i&&!t)throw new a("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:n,name:r,value:i}}throw new o("intrinsic "+e+" does not exist!")};t.exports=function(e,t){if("string"!=typeof e||0===e.length)throw new a("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new a('"allowMissing" argument must be a boolean');var n=j(e),r=n.length>0?n[0]:"",i=k("%"+r+"%",t),s=i.name,c=i.value,u=!1,p=i.alias;p&&(r=p[0],x(n,b([0,1],p)));for(var f=1,d=!0;f<n.length;f+=1){var h=n[f],g=w(h,0,1),A=w(h,-1);if(('"'===g||"'"===g||"`"===g||'"'===A||"'"===A||"`"===A)&&g!==A)throw new o("property names with quotes must have matching quotes");if("constructor"!==h&&d||(u=!0),v(y,s="%"+(r+="."+h)+"%"))c=y[s];else if(null!=c){if(!(h in c)){if(!t)throw new a("base intrinsic for "+e+" exists, but the property is not available.");return}if(l&&f+1>=n.length){var m=l(c,h);c=(d=!!m)&&"get"in m&&!("originalValue"in m.get)?m.get:c[h]}else d=v(c,h),c=c[h];d&&!u&&(y[s]=c)}}return c}},{"function-bind":10,has:14,"has-symbols":12}],12:[function(e,t,n){"use strict";var r="undefined"!=typeof Symbol&&Symbol,o=e("./shams");t.exports=function(){return"function"==typeof r&&"function"==typeof Symbol&&"symbol"==typeof r("foo")&&"symbol"==typeof Symbol("bar")&&o()}},{"./shams":13}],13:[function(e,t,n){"use strict";t.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),n=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;for(t in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var r=Object.getOwnPropertySymbols(e);if(1!==r.length||r[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(e,t);if(42!==o.value||!0!==o.enumerable)return!1}return!0}},{}],14:[function(e,t,n){"use strict";var r=e("function-bind");t.exports=r.call(Function.call,Object.prototype.hasOwnProperty)},{"function-bind":10}],15:[function(e,t,n){var r="function"==typeof Map&&Map.prototype,o=Object.getOwnPropertyDescriptor&&r?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,i=r&&o&&"function"==typeof o.get?o.get:null,a=r&&Map.prototype.forEach,s="function"==typeof Set&&Set.prototype,l=Object.getOwnPropertyDescriptor&&s?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,c=s&&l&&"function"==typeof l.get?l.get:null,u=s&&Set.prototype.forEach,p="function"==typeof WeakMap&&WeakMap.prototype?WeakMap.prototype.has:null,f="function"==typeof WeakSet&&WeakSet.prototype?WeakSet.prototype.has:null,d="function"==typeof WeakRef&&WeakRef.prototype?WeakRef.prototype.deref:null,h=Boolean.prototype.valueOf,y=Object.prototype.toString,g=Function.prototype.toString,A=String.prototype.match,m="function"==typeof BigInt?BigInt.prototype.valueOf:null,v=Object.getOwnPropertySymbols,b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol.prototype.toString:null,x="function"==typeof Symbol&&"object"==typeof Symbol.iterator,C=Object.prototype.propertyIsEnumerable,w=("function"==typeof Reflect?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(e){return e.__proto__}:null),S=e("./util.inspect").custom,T=S&&B(S)?S:null,j="function"==typeof Symbol&&void 0!==Symbol.toStringTag?Symbol.toStringTag:null;function k(e,t,n){var r="double"===(n.quoteStyle||t)?'"':"'";return r+e+r}function E(e){return String(e).replace(/"/g,"&quot;")}function D(e){return!("[object Array]"!==$(e)||j&&"object"==typeof e&&j in e)}function B(e){if(x)return e&&"object"==typeof e&&e instanceof Symbol;if("symbol"==typeof e)return!0;if(!e||"object"!=typeof e||!b)return!1;try{return b.call(e),!0}catch(e){}return!1}t.exports=function e(t,n,r,o){var s=n||{};if(N(s,"quoteStyle")&&"single"!==s.quoteStyle&&"double"!==s.quoteStyle)throw new TypeError('option "quoteStyle" must be "single" or "double"');if(N(s,"maxStringLength")&&("number"==typeof s.maxStringLength?s.maxStringLength<0&&s.maxStringLength!==1/0:null!==s.maxStringLength))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var l=!N(s,"customInspect")||s.customInspect;if("boolean"!=typeof l&&"symbol"!==l)throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if(N(s,"indent")&&null!==s.indent&&"\t"!==s.indent&&!(parseInt(s.indent,10)===s.indent&&s.indent>0))throw new TypeError('options "indent" must be "\\t", an integer > 0, or `null`');if(void 0===t)return"undefined";if(null===t)return"null";if("boolean"==typeof t)return t?"true":"false";if("string"==typeof t)return P(t,s);if("number"==typeof t)return 0===t?1/0/t>0?"0":"-0":String(t);if("bigint"==typeof t)return String(t)+"n";var y=void 0===s.depth?5:s.depth;if(void 0===r&&(r=0),r>=y&&y>0&&"object"==typeof t)return D(t)?"[Array]":"[Object]";var v,C=function(e,t){var n;if("\t"===e.indent)n="\t";else{if(!("number"==typeof e.indent&&e.indent>0))return null;n=Array(e.indent+1).join(" ")}return{base:n,prev:Array(t+1).join(n)}}(s,r);if(void 0===o)o=[];else if(I(o,t)>=0)return"[Circular]";function S(t,n,i){if(n&&(o=o.slice()).push(n),i){var a={depth:s.depth};return N(s,"quoteStyle")&&(a.quoteStyle=s.quoteStyle),e(t,a,r+1,o)}return e(t,s,r+1,o)}if("function"==typeof t){var O=function(e){if(e.name)return e.name;var t=A.call(g.call(e),/^function\s*([\w$]+)/);return t?t[1]:null}(t),L=F(t,S);return"[Function"+(O?": "+O:" (anonymous)")+"]"+(L.length>0?" { "+L.join(", ")+" }":"")}if(B(t)){var H=x?String(t).replace(/^(Symbol\(.*\))_[^)]*$/,"$1"):b.call(t);return"object"!=typeof t||x?H:q(H)}if((v=t)&&"object"==typeof v&&("undefined"!=typeof HTMLElement&&v instanceof HTMLElement||"string"==typeof v.nodeName&&"function"==typeof v.getAttribute)){for(var U="<"+String(t.nodeName).toLowerCase(),_=t.attributes||[],G=0;G<_.length;G++)U+=" "+_[G].name+"="+k(E(_[G].value),"double",s);return U+=">",t.childNodes&&t.childNodes.length&&(U+="..."),U+"</"+String(t.nodeName).toLowerCase()+">"}if(D(t)){if(0===t.length)return"[]";var z=F(t,S);return C&&!function(e){for(var t=0;t<e.length;t++)if(I(e[t],"\n")>=0)return!1;return!0}(z)?"["+W(z,C)+"]":"[ "+z.join(", ")+" ]"}if(function(e){return!("[object Error]"!==$(e)||j&&"object"==typeof e&&j in e)}(t)){var J=F(t,S);return 0===J.length?"["+String(t)+"]":"{ ["+String(t)+"] "+J.join(", ")+" }"}if("object"==typeof t&&l){if(T&&"function"==typeof t[T])return t[T]();if("symbol"!==l&&"function"==typeof t.inspect)return t.inspect()}if(function(e){if(!i||!e||"object"!=typeof e)return!1;try{i.call(e);try{c.call(e)}catch(e){return!0}return e instanceof Map}catch(e){}return!1}(t)){var Q=[];return a.call(t,(function(e,n){Q.push(S(n,t,!0)+" => "+S(e,t))})),R("Map",i.call(t),Q,C)}if(function(e){if(!c||!e||"object"!=typeof e)return!1;try{c.call(e);try{i.call(e)}catch(e){return!0}return e instanceof Set}catch(e){}return!1}(t)){var Y=[];return u.call(t,(function(e){Y.push(S(e,t))})),R("Set",c.call(t),Y,C)}if(function(e){if(!p||!e||"object"!=typeof e)return!1;try{p.call(e,p);try{f.call(e,f)}catch(e){return!0}return e instanceof WeakMap}catch(e){}return!1}(t))return M("WeakMap");if(function(e){if(!f||!e||"object"!=typeof e)return!1;try{f.call(e,f);try{p.call(e,p)}catch(e){return!0}return e instanceof WeakSet}catch(e){}return!1}(t))return M("WeakSet");if(function(e){if(!d||!e||"object"!=typeof e)return!1;try{return d.call(e),!0}catch(e){}return!1}(t))return M("WeakRef");if(function(e){return!("[object Number]"!==$(e)||j&&"object"==typeof e&&j in e)}(t))return q(S(Number(t)));if(function(e){if(!e||"object"!=typeof e||!m)return!1;try{return m.call(e),!0}catch(e){}return!1}(t))return q(S(m.call(t)));if(function(e){return!("[object Boolean]"!==$(e)||j&&"object"==typeof e&&j in e)}(t))return q(h.call(t));if(function(e){return!("[object String]"!==$(e)||j&&"object"==typeof e&&j in e)}(t))return q(S(String(t)));if(!function(e){return!("[object Date]"!==$(e)||j&&"object"==typeof e&&j in e)}(t)&&!function(e){return!("[object RegExp]"!==$(e)||j&&"object"==typeof e&&j in e)}(t)){var V=F(t,S),K=w?w(t)===Object.prototype:t instanceof Object||t.constructor===Object,X=t instanceof Object?"":"null prototype",Z=!K&&j&&Object(t)===t&&j in t?$(t).slice(8,-1):X?"Object":"",ee=(K||"function"!=typeof t.constructor?"":t.constructor.name?t.constructor.name+" ":"")+(Z||X?"["+[].concat(Z||[],X||[]).join(": ")+"] ":"");return 0===V.length?ee+"{}":C?ee+"{"+W(V,C)+"}":ee+"{ "+V.join(", ")+" }"}return String(t)};var O=Object.prototype.hasOwnProperty||function(e){return e in this};function N(e,t){return O.call(e,t)}function $(e){return y.call(e)}function I(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1}function P(e,t){if(e.length>t.maxStringLength){var n=e.length-t.maxStringLength,r="... "+n+" more character"+(n>1?"s":"");return P(e.slice(0,t.maxStringLength),t)+r}return k(e.replace(/(['\\])/g,"\\$1").replace(/[\x00-\x1f]/g,L),"single",t)}function L(e){var t=e.charCodeAt(0),n={8:"b",9:"t",10:"n",12:"f",13:"r"}[t];return n?"\\"+n:"\\x"+(t<16?"0":"")+t.toString(16).toUpperCase()}function q(e){return"Object("+e+")"}function M(e){return e+" { ? }"}function R(e,t,n,r){return e+" ("+t+") {"+(r?W(n,r):n.join(", "))+"}"}function W(e,t){if(0===e.length)return"";var n="\n"+t.prev+t.base;return n+e.join(","+n)+"\n"+t.prev}function F(e,t){var n=D(e),r=[];if(n){r.length=e.length;for(var o=0;o<e.length;o++)r[o]=N(e,o)?t(e[o],e):""}var i,a="function"==typeof v?v(e):[];if(x){i={};for(var s=0;s<a.length;s++)i["$"+a[s]]=a[s]}for(var l in e)N(e,l)&&(n&&String(Number(l))===l&&l<e.length||x&&i["$"+l]instanceof Symbol||(/[^\w$]/.test(l)?r.push(t(l,e)+": "+t(e[l],e)):r.push(l+": "+t(e[l],e))));if("function"==typeof v)for(var c=0;c<a.length;c++)C.call(e,a[c])&&r.push("["+t(a[c])+"]: "+t(e[a[c]],e));return r}},{"./util.inspect":6}],16:[function(e,t,n){"use strict";var r=e("get-intrinsic"),o=e("call-bind/callBound"),i=e("object-inspect"),a=r("%TypeError%"),s=r("%WeakMap%",!0),l=r("%Map%",!0),c=o("WeakMap.prototype.get",!0),u=o("WeakMap.prototype.set",!0),p=o("WeakMap.prototype.has",!0),f=o("Map.prototype.get",!0),d=o("Map.prototype.set",!0),h=o("Map.prototype.has",!0),y=function(e,t){for(var n,r=e;null!==(n=r.next);r=n)if(n.key===t)return r.next=n.next,n.next=e.next,e.next=n,n};t.exports=function(){var e,t,n,r={assert:function(e){if(!r.has(e))throw new a("Side channel does not contain "+i(e))},get:function(r){if(s&&r&&("object"==typeof r||"function"==typeof r)){if(e)return c(e,r)}else if(l){if(t)return f(t,r)}else if(n)return function(e,t){var n=y(e,t);return n&&n.value}(n,r)},has:function(r){if(s&&r&&("object"==typeof r||"function"==typeof r)){if(e)return p(e,r)}else if(l){if(t)return h(t,r)}else if(n)return function(e,t){return!!y(e,t)}(n,r);return!1},set:function(r,o){s&&r&&("object"==typeof r||"function"==typeof r)?(e||(e=new s),u(e,r,o)):l?(t||(t=new l),d(t,r,o)):(n||(n={key:{},next:null}),function(e,t,n){var r=y(e,t);r?r.value=n:e.next={key:t,next:e.next,value:n}}(n,r,o))}};return r}},{"call-bind/callBound":7,"get-intrinsic":11,"object-inspect":15}]},{},[2])(2)},379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],s=0;s<e.length;s++){var l=e[s],c=r.base?l[0]+r.base:l[0],u=i[c]||0,p="".concat(c," ").concat(u);i[c]=u+1;var f=n(p),d={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==f)t[f].references++,t[f].updater(d);else{var h=o(d,r);r.byIndex=s,t.splice(s,0,{identifier:p,updater:h,references:1})}a.push(p)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=n(i[a]);t[s].references--}for(var l=r(e,o),c=0;c<i.length;c++){var u=n(i[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=l}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},448:(e,t,n)=>{"use strict";e.exports=n.p+"c7cb268a1a93e27e99fc.jpg"}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.m=e,n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.b=document.baseURI||self.location.href,(()=>{"use strict";var e=n(755),t=n.n(e),r=n(379),o=n.n(r),i=n(795),a=n.n(i),s=n(569),l=n.n(s),c=n(565),u=n.n(c),p=n(216),f=n.n(p),d=n(589),h=n.n(d),y=n(192),g={};g.styleTagTransform=h(),g.setAttributes=u(),g.insert=l().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=f(),o()(y.Z,g),y.Z&&y.Z.locals&&y.Z.locals;var A=n(305),m=n.n(A);const v="05c9157823msh04fb837c33df20ep1e9445jsn82ef79ff4054",b="13ce3580d4055d11d018bcd2bd23501f";function x(e){if(e)return parseInt(e).toLocaleString("en",{useGrouping:!0})}const C=async e=>{try{const t=await fetch("../Travel_Site/countries.json");if(!t.ok)throw new Error(`${t.status} ${t.statusText}`);const n=await t.json(),r=Object.keys(n),o=Object.values(n);for(let t=0;t<r.length;t++)$(`<option value="${o[t]}">${r[t]}</option>`).appendTo(e)}catch(e){console.error(e)}},w=async(e,t,n)=>{n.text("");try{const n=await fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${e},${t}&limit=1&appid=${b}`);if(!n.ok)throw new Error(`${n.status} ${n.statusText}`);const r=await n.json();return[r[0].lat,r[0].lon]}catch(e){n.text("We're sorry! That location was not found."),console.error(e)}};let S,T=[];function j(e){return new Date(1e3*e).toLocaleDateString("en-US")}class k{sections=[];links=[];IDS=[];callbackArray;currentlyShowing;default;constructor(e,t,n){if(e.forEach(((e,t)=>{if(this.IDS.push(e),this.sections.push(document.getElementById(e)),!this.sections[t])throw new Error(`Invalid id. No element was found with an id of ${e}`);document.querySelectorAll(`a[href='#${e}']`).forEach((t=>this.links.push({link:t,id:e})))})),this.callbackArray=n||[],t&&!this.IDS.includes(t))throw new Error(`Invalid starting display id. ${t} is not in the array of ids.`);this.default=null===t||t?t:this.IDS[0],this.navigateTo(this.default),this.links.forEach((e=>{e.link.addEventListener("click",(()=>this.navigateTo(e.id)))})),window.addEventListener("hashchange",this.hashConsistency),window.addEventListener("load",this.hashConsistency)}hashConsistency=()=>{const e=window.location.hash.substring(1);if(e!==this.currentlyShowing)if(this.IDS.includes(e))this.navigateTo(e);else if(""===e)this.navigateTo(this.default);else for(let t=0;t<this.IDS.length;t++)if(null!==document.querySelector(`#${this.IDS[t]} #${e}`)){this.navigateTo(this.IDS[t]);break}};navigateTo(e){if(null!==e){const t=this.IDS.findIndex((t=>t===e));this.hideSections(t),this.callbackArray[t]&&this.callbackArray[t]()}else this.hideSections(e)}hideSections(e){this.sections.forEach(((t,n)=>{n!==e&&(t.style.display="none")})),null!==e?(this.sections[e].style.display="block",this.currentlyShowing=this.IDS[e]):this.currentlyShowing=null}}function E(e,t,n){new k(e,t,n)}t()("#chooseLang").submit((e=>{e.preventDefault(),(async()=>{const e={q:`${$("#translateInput").val()}`,target:`${$("#language").val()}`},t=m().stringify(e);try{const e=await fetch("https://google-translate1.p.rapidapi.com/language/translate/v2",{method:"POST",headers:{"content-type":"application/x-www-form-urlencoded","accept-encoding":"application/gzip","x-rapidapi-host":"google-translate1.p.rapidapi.com","x-rapidapi-key":v},body:t});if(!e.ok)throw new Error(`${e.status} ${e.statusText}`);const n=await e.json();$("#translateOutput").text(n.data.translations[0].translatedText)}catch(e){console.error(e)}})()})),t()("#covidStats").click((e=>{e.preventDefault(),(async()=>{$("#errorCovid").text("");const e=`https://covid-193.p.rapidapi.com/statistics?country=${$("#countries").val()}`;try{const t=await fetch(e,{method:"GET",headers:{"x-rapidapi-host":"covid-193.p.rapidapi.com","x-rapidapi-key":v}});if(!t.ok)throw new Error(`${t.status} ${t.statusText}`);const n=await t.json();$("#covidCountry").text(n.response[0].country),$("#population").text(x(n.response[0].population)),$("#newCases").text(x(n.response[0].cases.new)),$("#active").text(x(n.response[0].cases.active)),$("#critical").text(x(n.response[0].cases.critical)),$("#recovered").text(x(n.response[0].cases.recovered)),$("#casesMill").text(x(n.response[0].cases["1M_pop"])),$("#totalCases").text(x(n.response[0].cases.total)),$("#newDeaths").text(x(n.response[0].deaths.new)),$("#totalDeaths").text(x(n.response[0].deaths.total)),$("#deathsMill").text(x(n.response[0].deaths["1M_pop"])),$("#totalTests").text(x(n.response[0].tests.total)),$("#testsMill").text(x(n.response[0].tests["1M_pop"])),$("#covidDaily").show()}catch(e){$("#errorCovid").text("Data for that country was not found"),$("#covidDaily").hide(),console.error(e)}})()}));const D=t()("#countriesWeather"),B=t()("#errorWeather"),O=t()("#cityInputWeather");t()("#weatherForecast").click((async e=>{e.preventDefault(),(async e=>{const[t,n]=e;$("#errorWeather").text("");try{const e=await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${t}&lon=${n}&exclude=minutely,hourly&appid=${b}&units=imperial&lang=en`);if(!e.ok)throw new Error(`${e.status} ${e.statusText}`);const r=await e.json();T=[],S={date:j(r.current.dt),temperature:r.current.temp,feelsLike:r.current.feels_like,clouds:r.current.clouds,windSpeed:r.current.wind_speed,humidity:r.current.humidity,weather:r.current.weather[0].main,description:r.current.weather[0].description,icon:r.current.weather[0].icon},r.daily.forEach((e=>{T.push({date:j(e.dt),clouds:e.clouds,feelsLikeDay:e.feels_like.day,feelsLikeEve:e.feels_like.eve,feelsLikeMorn:e.feels_like.morn,feelsLikeNight:e.feels_like.night,humidity:e.humidity,tempDay:e.temp.day,tempEve:e.temp.eve,tempMax:e.temp.max,tempMin:e.temp.min,tempMorn:e.temp.morn,tempNight:e.temp.night,weather:e.weather[0].main,description:e.weather[0].description,icon:e.weather[0].icon,windSpeed:e.wind_speed})})),(()=>{$("#currentDate").text(`${S.date}`),$("#currentDescription").text(`${S.description}`),$("#currentWeatherBrief").text(`${S.weather}`),$("#currentTemp").html(`${S.temperature}&#176;F`),$("#currentFeel").html(`${S.feelsLike}&#176F`),$("#currentClouds").text(`${S.clouds}%`),$("#currentWeather .icon").attr("src",`https://openweathermap.org/img/wn/${S.icon}@2x.png`),$("#currentWindSpeed").text(`${S.windSpeed}mph`),$("#currentHumidity").text(`${S.humidity}%`),$("#diffDayWeather").text("");for(let e=0;e<T.length;e++)$(`<div class = "day"> <div class="date">${T[e].date}</div> <div class="weatherBrief">${T[e].weather}</div>\n        <div class="description">${T[e].description}</div>\n        <img src="https://openweathermap.org/img/wn/${T[e].icon}@2x.png" alt="${T[e].weather}" class="icon">\n        <div>High <span class="tempMax">${T[e].tempMax}&#176;F</span> Low <span class="tempMin">${T[e].tempMin}&#176;F</span></div>\n        <div>Cloud Cover <span class="clouds">${T[e].clouds}%</span>\n        </div>\n        <div>Wind Speed <span class="windSpeed">${T[e].windSpeed}mph</span>\n        </div>\n        <div>Humidity <span class="humidity">${T[e].humidity}%</span>\n        </div></div>`).appendTo($("#diffDayWeather"))})(),$("#weatherInfo").show()}catch(e){$("#errorWeather").text("We're sorry! That location was not found."),$("#weatherInfo").hide(),console.error(e)}})(await w(O.val(),D.val(),B))}));const N=t()("#citiesCityInput"),I=t()("#citiesCountrySelect"),P=[{div:t()("#attractions"),file:"../Travel_Site/places_lists/attractions.json",select:t()("#attractionsSelect"),button:t()("#attractionsGo")},{div:t()("#food"),file:"../Travel_Site/places_lists/food.json",select:t()("#foodSelect"),button:t()("#foodGo")},{div:t()("#health"),file:"../Travel_Site/places_lists/health.json",select:t()("#healthSelect"),button:t()("#healthGo")},{div:t()("#stores"),file:"../Travel_Site/places_lists/shopping.json",select:t()("#storesSelect"),button:t()("#storesGo")},{div:t()("#transportation"),file:"../Travel_Site/places_lists/transportation.json",select:t()("#transportationSelect"),button:t()("#transportationGo")},{div:t()("#useful"),file:"../Travel_Site/places_lists/useful.json",select:t()("#usefulSelect"),button:t()("#usefulGo")}];let L;E(["home","cities","covid","translate","weather"],"home",[null,function(){I.children().length<1&&C(I),L||(P.forEach((e=>{const n=[];P.forEach((e=>{n.push((()=>{t()(e.div.children(".display")).text(""),e.select.children().length<1&&(async(e,t)=>{try{const n=await fetch(e);if(!n.ok)throw new Error(`${n.status} ${n.statusText}`);(await n.json()).forEach((e=>{$(`<option value="${e.value}">${e.name}</option>`).appendTo(t)}))}catch(e){console.error(e)}})(e.file,e.select)}))})),e.button.click((async n=>{n.preventDefault(),(async(e,t,n)=>{const[r,o]=e;t.text("");try{const e=await fetch(`https://trueway-places.p.rapidapi.com/FindPlacesNearby?location=${r}%2C${o}&type=${n}&radius=10000&language=en`,{method:"GET",headers:{"x-rapidapi-host":"trueway-places.p.rapidapi.com","x-rapidapi-key":v}});if(!e.ok)throw new Error(`${e.status} ${e.statusText}`);const i=await e.json();i.results.length>0?i.results.forEach((e=>{const n=e.address||"No Address",r=e.website||"No Website",o=e.phone_number||"No Phone Number";$(`<div class="place">\n                <div class="name">${e.name}</div>\n                <div class="address">${n}</div>\n                <div class="phoneNumber">${o}</div>\n                <div class="website">${r}</div>\n            </div>`).appendTo(t)})):$("#citiesError").text("No places found. Try changing your search parameters.")}catch(e){console.error(e)}})(await w(N.val(),I.val(),t()("#citiesError")),t()(e.div.children(".display")),e.select.val())})),E(["attractions","food","health","stores","transportation","useful"],null,n)})),L=!0)},function(){t()("#countries").children().length<1&&(async()=>{try{const e=await fetch("https://covid-193.p.rapidapi.com/countries",{method:"GET",headers:{"x-rapidapi-host":"covid-193.p.rapidapi.com","x-rapidapi-key":v}});if(!e.ok)throw new Error(`${e.status} ${e.statusText}`);(await e.json()).response.forEach((e=>{$(`<option value="${e}">${e}</option>`).appendTo($("#countries"))}))}catch(e){console.error(e)}})()},function(){t()("#language").children().length<1&&(async()=>{try{const e=await fetch("../Travel_Site/languages.json");if(!e.ok)throw new Error(`${e.status} ${e.statusText}`);(await e.json()).forEach((e=>{$(`<option value="${e.code}">${e.name}</option>`).appendTo($("#language"))}))}catch(e){console.error(e)}})()},function(){D.children().length<1&&C(D)}])})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,